
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08002864  08002864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a00  08002a00  00027d24  2**0
                  CONTENTS
  4 .ARM          00000000  08002a00  08002a00  00027d24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a00  08002a00  00027d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007d24  20000000  08002a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20007d24  0800a72c  00027d24  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008598  0800a72c  00028598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027d24  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027d54  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c29  00000000  00000000  00027d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a24  00000000  00000000  0002d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e8  00000000  00000000  0002f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000041a  00000000  00000000  0002f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002470  00000000  00000000  0002fdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cf1  00000000  00000000  0003225a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5783  00000000  00000000  0003bf4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000185c  00000000  00000000  001316d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00132f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007d24 	.word	0x20007d24
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800284c 	.word	0x0800284c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007d28 	.word	0x20007d28
 80001cc:	0800284c 	.word	0x0800284c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <convert_to_uint16>:
 *      Author: james
 */

#include "stdint.h"

uint32_t convert_to_uint16(uint32_t p_value) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    return ((p_value & 0xFF00) >> 8) | ((p_value & 0x00FF) << 8);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	0a1b      	lsrs	r3, r3, #8
 800029c:	b2da      	uxtb	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	021b      	lsls	r3, r3, #8
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	4313      	orrs	r3, r2
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <Error_Handler>:
#include "printf.h"
#include "dac.h"
#include <stdint.h>
#include "systick.h"

void Error_Handler () {
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08a      	sub	sp, #40	; 0x28
 8000300:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0314 	add.w	r3, r7, #20
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000312:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <GPIO_Init+0xc4>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	4a2a      	ldr	r2, [pc, #168]	; (80003c0 <GPIO_Init+0xc4>)
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031e:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <GPIO_Init+0xc4>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	613b      	str	r3, [r7, #16]
 8000328:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <GPIO_Init+0xc4>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a24      	ldr	r2, [pc, #144]	; (80003c0 <GPIO_Init+0xc4>)
 8000330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <GPIO_Init+0xc4>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <GPIO_Init+0xc4>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a1e      	ldr	r2, [pc, #120]	; (80003c0 <GPIO_Init+0xc4>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <GPIO_Init+0xc4>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <GPIO_Init+0xc4>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <GPIO_Init+0xc4>)
 8000360:	f043 0302 	orr.w	r3, r3, #2
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000366:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <GPIO_Init+0xc4>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	f003 0302 	and.w	r3, r3, #2
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000376:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800037c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	480e      	ldr	r0, [pc, #56]	; (80003c4 <GPIO_Init+0xc8>)
 800038a:	f001 fbd5 	bl	8001b38 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 800038e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000392:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000394:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000398:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800039a:	2302      	movs	r3, #2
 800039c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 0314 	add.w	r3, r7, #20
 80003a2:	4619      	mov	r1, r3
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f001 fbc6 	bl	8001b38 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ac:	2028      	movs	r0, #40	; 0x28
 80003ae:	f7ff ff87 	bl	80002c0 <__NVIC_EnableIRQ>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003b2:	2017      	movs	r0, #23
 80003b4:	f7ff ff84 	bl	80002c0 <__NVIC_EnableIRQ>
}
 80003b8:	bf00      	nop
 80003ba:	3728      	adds	r7, #40	; 0x28
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	48000800 	.word	0x48000800

080003c8 <LED_Init>:


//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
void LED_Init(uint8_t pin){
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <LED_Init+0xb8>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a2a      	ldr	r2, [pc, #168]	; (8000480 <LED_Init+0xb8>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 80003de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	2103      	movs	r1, #3
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	43db      	mvns	r3, r3
 80003f0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003f4:	4013      	ands	r3, r2
 80003f6:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800040c:	4313      	orrs	r3, r2
 800040e:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000414:	689a      	ldr	r2, [r3, #8]
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	2103      	movs	r1, #3
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
 8000420:	43db      	mvns	r3, r3
 8000422:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000426:	4013      	ands	r3, r2
 8000428:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 800042a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800042e:	689a      	ldr	r2, [r3, #8]
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	2103      	movs	r1, #3
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800043e:	4313      	orrs	r3, r2
 8000440:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000446:	685a      	ldr	r2, [r3, #4]
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2101      	movs	r1, #1
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	43db      	mvns	r3, r3
 8000452:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000456:	4013      	ands	r3, r2
 8000458:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 800045a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800045e:	68da      	ldr	r2, [r3, #12]
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	2103      	movs	r1, #3
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
 800046a:	43db      	mvns	r3, r3
 800046c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000470:	4013      	ands	r3, r2
 8000472:	60cb      	str	r3, [r1, #12]
	
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(uint8_t pin){
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 800048e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2101      	movs	r1, #1
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004a0:	4313      	orrs	r3, r2
 80004a2:	614b      	str	r3, [r1, #20]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 80004ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2101      	movs	r1, #1
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	43db      	mvns	r3, r3
 80004ca:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004ce:	4013      	ands	r3, r2
 80004d0:	614b      	str	r3, [r1, #20]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(uint8_t pin){
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	4603      	mov	r3, r0
 80004e6:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR ^= (1UL<<pin);
 80004e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2101      	movs	r1, #1
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004fa:	4053      	eors	r3, r2
 80004fc:	614b      	str	r3, [r1, #20]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <UART2_Init+0x4c>)
 8000512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <UART2_Init+0x4c>)
 8000516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051a:	6593      	str	r3, [r2, #88]	; 0x58
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock

	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <UART2_Init+0x4c>)
 800051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <UART2_Init+0x4c>)
 8000524:	f023 030c 	bic.w	r3, r3, #12
 8000528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <UART2_Init+0x4c>)
 800052e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <UART2_Init+0x4c>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	USART2->CR1 |= (1<<5);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <UART2_Init+0x50>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <UART2_Init+0x50>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6013      	str	r3, [r2, #0]

	UART2_GPIO_Init();
 8000548:	f000 f80a 	bl	8000560 <UART2_GPIO_Init>
	USART_Init(USART2);
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <UART2_Init+0x50>)
 800054e:	f000 f84f 	bl	80005f0 <USART_Init>

	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	40004400 	.word	0x40004400

08000560 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <UART2_GPIO_Init+0x8c>)
 8000566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000568:	4a20      	ldr	r2, [pc, #128]	; (80005ec <UART2_GPIO_Init+0x8c>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800057e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800058e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000594:	6a1b      	ldr	r3, [r3, #32]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800059e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a4:	6a1b      	ldr	r3, [r3, #32]
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005aa:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80005ae:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80005b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ba:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80005be:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80005c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005ce:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80005d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005da:	f023 030c 	bic.w	r3, r3, #12
 80005de:	6053      	str	r3, [r2, #4]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f023 0201 	bic.w	r2, r3, #1
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f242 028d 	movw	r2, #8333	; 0x208d
 800062e:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f043 020c 	orr.w	r2, r3, #12
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <USART_Init+0x10c>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d129      	bne.n	8000698 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f043 0220 	orr.w	r2, r3, #32
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f023 0210 	bic.w	r2, r3, #16
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f023 0201 	bic.w	r2, r3, #1
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <USART_Init+0x110>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d111      	bne.n	80006c4 <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <USART_Init+0x114>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <USART_Init+0x114>)
 80006b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006b6:	6093      	str	r3, [r2, #8]
		USART2->CR1 |= (1<<5);
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <USART_Init+0x110>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a10      	ldr	r2, [pc, #64]	; (8000700 <USART_Init+0x110>)
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	6013      	str	r3, [r2, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f043 0201 	orr.w	r2, r3, #1
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80006d0:	bf00      	nop
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f9      	beq.n	80006d2 <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80006de:	bf00      	nop
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f9      	beq.n	80006e0 <USART_Init+0xf0>
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40004c00 	.word	0x40004c00
 8000700:	40004400 	.word	0x40004400
 8000704:	40013800 	.word	0x40013800

08000708 <USART_Read_Nonblocking>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if ((USARTx->ISR & USART_ISR_RXNE)){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f003 0320 	and.w	r3, r3, #32
 8000718:	2b00      	cmp	r3, #0
 800071a:	d004      	beq.n	8000726 <USART_Read_Nonblocking+0x1e>
	// USART resets the RXNE flag automatically after reading DR
		return ((uint8_t)(USARTx->RDR & 0xFF));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	e000      	b.n	8000728 <USART_Read_Nonblocking+0x20>
	// Reading USART_DR automatically clears the RXNE flag
	}
	return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e014      	b.n	8000770 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000746:	bf00      	nop
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f9      	beq.n	8000748 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000762:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000766:	f000 f819 	bl	800079c <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8e6      	bhi.n	8000746 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000778:	bf00      	nop
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	61da      	str	r2, [r3, #28]
}   
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	fb03 f202 	mul.w	r2, r3, r2
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <USART_Delay+0x3c>)
 80007ae:	fba3 1302 	umull	r1, r3, r3, r2
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	0852      	lsrs	r2, r2, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	089b      	lsrs	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f9      	bne.n	80007be <USART_Delay+0x22>
}
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	24924925 	.word	0x24924925

080007dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a15      	ldr	r2, [pc, #84]	; (8000850 <HAL_DAC_MspInit+0x74>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d124      	bne.n	8000848 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_DAC_MspInit+0x78>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_DAC_MspInit+0x78>)
 8000804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_DAC_MspInit+0x78>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_DAC_MspInit+0x78>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_DAC_MspInit+0x78>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_DAC_MspInit+0x78>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800082e:	2310      	movs	r3, #16
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f001 f978 	bl	8001b38 <HAL_GPIO_Init>
  }

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40007400 	.word	0x40007400
 8000854:	40021000 	.word	0x40021000

08000858 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2224      	movs	r2, #36	; 0x24
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fc05 	bl	8002074 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <DAC_Init+0x5c>)
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <DAC_Init+0x60>)
 800086e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <DAC_Init+0x5c>)
 8000872:	f000 ffb3 	bl	80017dc <HAL_DAC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <DAC_Init+0x28>
  {
    Error_Handler();
 800087c:	f7ff fd19 	bl	80002b2 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <DAC_Init+0x5c>)
 800089c:	f001 f832 	bl	8001904 <HAL_DAC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <DAC_Init+0x52>
  {
    Error_Handler();
 80008a6:	f7ff fd04 	bl	80002b2 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20007d40 	.word	0x20007d40
 80008b8:	40007400 	.word	0x40007400

080008bc <DAC_Start>:

void DAC_Start () {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 80008c0:	2100      	movs	r1, #0
 80008c2:	4802      	ldr	r0, [pc, #8]	; (80008cc <DAC_Start+0x10>)
 80008c4:	f000 ffac 	bl	8001820 <HAL_DAC_Start>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20007d40 	.word	0x20007d40

080008d0 <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <DAC_Set_Value+0x1c>)
 80008e0:	f000 ffeb 	bl	80018ba <HAL_DAC_SetValue>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20007d40 	.word	0x20007d40

080008f0 <main>:
#include "clock.h"
#include "structs.h"
#include "sqr_wave.h"
#include "hw8.h"
	
int main(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 80008f4:	f000 fd5a 	bl	80013ac <System_Clock_Init>
	LED_Init(8);
 80008f8:	2008      	movs	r0, #8
 80008fa:	f7ff fd65 	bl	80003c8 <LED_Init>
	UART2_Init();
 80008fe:	f7ff fe05 	bl	800050c <UART2_Init>

	display_menu();
 8000902:	f000 f85b 	bl	80009bc <display_menu>
	run_project();
 8000906:	f000 f8e9 	bl	8000adc <run_project>
 800090a:	2300      	movs	r3, #0

}
 800090c:	4618      	mov	r0, r3
 800090e:	bd80      	pop	{r7, pc}

08000910 <EXTI15_10_IRQHandler>:
 *  simply toggles the state of the mode variable from 0 to 1
 *  or vice versa. Also prints out message telling the user whether
 *  they are in remote or local mode, and turns LED off upon switching
 *  modes.
 */
void EXTI15_10_IRQHandler () {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	EXTI->PR1 |= (1 << 13);
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <EXTI15_10_IRQHandler+0x4c>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <EXTI15_10_IRQHandler+0x4c>)
 800091a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800091e:	6153      	str	r3, [r2, #20]

	mode = !mode;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <EXTI15_10_IRQHandler+0x50>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	bf0c      	ite	eq
 8000928:	2301      	moveq	r3, #1
 800092a:	2300      	movne	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <EXTI15_10_IRQHandler+0x50>)
 8000932:	701a      	strb	r2, [r3, #0]

	if(mode == 1)
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <EXTI15_10_IRQHandler+0x50>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d103      	bne.n	8000944 <EXTI15_10_IRQHandler+0x34>
		printf("\r\n%s\r\n", "***MANUAL OVERRIDE ACTIVE***");
 800093c:	4909      	ldr	r1, [pc, #36]	; (8000964 <EXTI15_10_IRQHandler+0x54>)
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <EXTI15_10_IRQHandler+0x58>)
 8000940:	f000 fe32 	bl	80015a8 <printf>
	if(mode == 0)
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <EXTI15_10_IRQHandler+0x50>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d103      	bne.n	8000954 <EXTI15_10_IRQHandler+0x44>
		printf("\r\n%s\r\n", "***REMOTE MODE ACTIVE***");
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <EXTI15_10_IRQHandler+0x5c>)
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <EXTI15_10_IRQHandler+0x58>)
 8000950:	f000 fe2a 	bl	80015a8 <printf>

	stop();
 8000954:	f000 f8ba 	bl	8000acc <stop>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40010400 	.word	0x40010400
 8000960:	20007d54 	.word	0x20007d54
 8000964:	08002864 	.word	0x08002864
 8000968:	08002884 	.word	0x08002884
 800096c:	0800288c 	.word	0x0800288c

08000970 <EXTI9_5_IRQHandler>:
/*
 * This is the interrupt handler for the s1 button. When fired,
 * it toggles the pause_toggle variable between 0 and 1. Used in
 * run_project to determine what satte the LED is in.
 */
void EXTI9_5_IRQHandler() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	EXTI->PR1 |= (1<<9);
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <EXTI9_5_IRQHandler+0x44>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <EXTI9_5_IRQHandler+0x44>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6153      	str	r3, [r2, #20]

	if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_SET){
 8000980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f001 fa80 	bl	8001e8c <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d10e      	bne.n	80009b0 <EXTI9_5_IRQHandler+0x40>
		if(pause_toggle == 0){
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <EXTI9_5_IRQHandler+0x48>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d103      	bne.n	80009a2 <EXTI9_5_IRQHandler+0x32>
			pause_toggle = 1;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <EXTI9_5_IRQHandler+0x48>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
		}
		else if (pause_toggle == 1){
			pause_toggle = 0;
		}
	}
}
 80009a0:	e006      	b.n	80009b0 <EXTI9_5_IRQHandler+0x40>
		else if (pause_toggle == 1){
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <EXTI9_5_IRQHandler+0x48>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d102      	bne.n	80009b0 <EXTI9_5_IRQHandler+0x40>
			pause_toggle = 0;
 80009aa:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EXTI9_5_IRQHandler+0x48>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20007d6c 	.word	0x20007d6c

080009bc <display_menu>:

/**
 * displays list of all available commands
 * to the terminal.
 */
void display_menu(){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	printf("%s\r\n", "***REMOTE LED CONTROL MENU***");
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <display_menu+0x38>)
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <display_menu+0x3c>)
 80009c4:	f000 fdf0 	bl	80015a8 <printf>
	printf("%s\r\n", "Available User Commands");
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <display_menu+0x40>)
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <display_menu+0x3c>)
 80009cc:	f000 fdec 	bl	80015a8 <printf>
	printf("%s\r\n", "NEXT - Show next song info");
 80009d0:	490b      	ldr	r1, [pc, #44]	; (8000a00 <display_menu+0x44>)
 80009d2:	4809      	ldr	r0, [pc, #36]	; (80009f8 <display_menu+0x3c>)
 80009d4:	f000 fde8 	bl	80015a8 <printf>
	printf("%s\r\n", "PLAY - Play the song (LED On)");
 80009d8:	490a      	ldr	r1, [pc, #40]	; (8000a04 <display_menu+0x48>)
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <display_menu+0x3c>)
 80009dc:	f000 fde4 	bl	80015a8 <printf>
	printf("%s\r\n", "PAUSE - Pause the song (LED Flash)");
 80009e0:	4909      	ldr	r1, [pc, #36]	; (8000a08 <display_menu+0x4c>)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <display_menu+0x3c>)
 80009e4:	f000 fde0 	bl	80015a8 <printf>
	printf("%s\r\n", "STOP - Stop the song (LED Off)");
 80009e8:	4908      	ldr	r1, [pc, #32]	; (8000a0c <display_menu+0x50>)
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <display_menu+0x3c>)
 80009ec:	f000 fddc 	bl	80015a8 <printf>

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080028a8 	.word	0x080028a8
 80009f8:	080028c8 	.word	0x080028c8
 80009fc:	080028d0 	.word	0x080028d0
 8000a00:	080028e8 	.word	0x080028e8
 8000a04:	08002904 	.word	0x08002904
 8000a08:	08002924 	.word	0x08002924
 8000a0c:	08002948 	.word	0x08002948

08000a10 <next>:
 * function in midiparser.c to read midi data.
 * changes song num depending on the current song,
 * and sets useful information regarding current song
 * and its size
 */
void next(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	song current_song_array = get_song(current_song_num);
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <next+0x58>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fa8d 	bl	8000f40 <get_song>
	current_song = current_song_array.p_song;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <next+0x5c>)
 8000a2a:	6013      	str	r3, [r2, #0]
	size = current_song_array.size;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <next+0x60>)
 8000a32:	601a      	str	r2, [r3, #0]

	parsenext(current_song, size);
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <next+0x5c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <next+0x60>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fa69 	bl	8000f16 <parsenext>

	// loops back to first song if current song is last in loop, otherwise increment
	if (current_song_num == 4){
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <next+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d103      	bne.n	8000a54 <next+0x44>
	    current_song_num = 0;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <next+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
	}
	else{
	    current_song_num++;
	}
}
 8000a52:	e004      	b.n	8000a5e <next+0x4e>
	    current_song_num++;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <next+0x58>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <next+0x58>)
 8000a5c:	6013      	str	r3, [r2, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20007d58 	.word	0x20007d58
 8000a6c:	20007d5c 	.word	0x20007d5c
 8000a70:	20007d60 	.word	0x20007d60

08000a74 <play>:
 * Handles 'play' command. Turns on LED. Parses throught
 * midi file and creates an array of all bytes relative to the
 * track information. uses that info and sends it to parseTrack,
 * and then plays the current song.
 */
void play(){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	unsigned char* track_info;
	track_info = createTrackArray(current_song, size);
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <play+0x48>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <play+0x4c>)
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f9f3 	bl	8000e70 <createTrackArray>
 8000a8a:	6078      	str	r0, [r7, #4]

	LED_On(8);
 8000a8c:	2008      	movs	r0, #8
 8000a8e:	f7ff fcf9 	bl	8000484 <LED_On>

	t = getTempo(); //tempo
 8000a92:	f000 f90b 	bl	8000cac <getTempo>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <play+0x50>)
 8000a9a:	6013      	str	r3, [r2, #0]

	parseTrack(track_info);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 fb71 	bl	8001184 <parseTrack>
	playSong(current_song_num, t);
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <play+0x54>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <play+0x50>)
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fc05 	bl	80012bc <playSong>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20007d5c 	.word	0x20007d5c
 8000ac0:	20007d60 	.word	0x20007d60
 8000ac4:	20007d64 	.word	0x20007d64
 8000ac8:	20007d58 	.word	0x20007d58

08000acc <stop>:

/**
 * Handles 'stop' command. Turns off LED
 */
void stop(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	LED_Off(8);
 8000ad0:	2008      	movs	r0, #8
 8000ad2:	f7ff fced 	bl	80004b0 <LED_Off>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <run_project>:
 * and stores it in a buffer. Upon hitting enter after typing
 * a command, the buffer is compared against different command cases.
 * If the buffer matches a command, it runs that designated handler,
 * if not, "Invalid Command" is printed.
 */
void run_project(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0a4      	sub	sp, #144	; 0x90
 8000ae0:	af00      	add	r7, sp, #0
	init_systick();
 8000ae2:	f000 fde9 	bl	80016b8 <init_systick>
	GPIO_Init();
 8000ae6:	f7ff fc09 	bl	80002fc <GPIO_Init>

	char input[128]; // buffer for input
	int buffer_index = 0; // index to keep track of position in buffer
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int count = 0; // count for pause to make sure flashing 1/sec
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int pause = 0; // flag to keep track of whether light should be flashing or not. pseudo-boolean
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char byte; // used to store each character when reading user input

	while(1){

		if(mode == 0){ //remote mode controls
 8000afc:	4b5f      	ldr	r3, [pc, #380]	; (8000c7c <run_project+0x1a0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d17e      	bne.n	8000c02 <run_project+0x126>

			delay_systick(); // start systick timer
 8000b04:	f000 fdfe 	bl	8001704 <delay_systick>

			byte = USART_Read_Nonblocking(USART2); // read in character
 8000b08:	485d      	ldr	r0, [pc, #372]	; (8000c80 <run_project+0x1a4>)
 8000b0a:	f7ff fdfd 	bl	8000708 <USART_Read_Nonblocking>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			printf("%c", byte);
 8000b14:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fd37 	bl	800158c <putchar>

			if(byte == '\r'){ // once enter is pressed
 8000b1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000b22:	2b0d      	cmp	r3, #13
 8000b24:	d148      	bne.n	8000bb8 <run_project+0xdc>
				input[buffer_index] = '\0'; //add terminating character
 8000b26:	463a      	mov	r2, r7
 8000b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
				buffer_index = 0; // reset
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				printf("%s\r\n", (char*)input);
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4851      	ldr	r0, [pc, #324]	; (8000c84 <run_project+0x1a8>)
 8000b3e:	f000 fd33 	bl	80015a8 <printf>

				if(strcmp(input, "NEXT") == 0){ // if user entered next
 8000b42:	463b      	mov	r3, r7
 8000b44:	4950      	ldr	r1, [pc, #320]	; (8000c88 <run_project+0x1ac>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fb42 	bl	80001d0 <strcmp>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d105      	bne.n	8000b5e <run_project+0x82>
					pause = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					next();
 8000b58:	f7ff ff5a 	bl	8000a10 <next>
 8000b5c:	e03c      	b.n	8000bd8 <run_project+0xfc>
				}

				else if(strcmp(input, "PLAY") == 0){ // if user entered play
 8000b5e:	463b      	mov	r3, r7
 8000b60:	494a      	ldr	r1, [pc, #296]	; (8000c8c <run_project+0x1b0>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fb34 	bl	80001d0 <strcmp>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <run_project+0x9e>
					pause = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					play();
 8000b74:	f7ff ff7e 	bl	8000a74 <play>
 8000b78:	e02e      	b.n	8000bd8 <run_project+0xfc>
				}

				else if(strcmp(input, "PAUSE") == 0){ // if user entered pause
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4944      	ldr	r1, [pc, #272]	; (8000c90 <run_project+0x1b4>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb26 	bl	80001d0 <strcmp>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <run_project+0xb6>

					pause = 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b90:	e022      	b.n	8000bd8 <run_project+0xfc>
				}

				else if(strcmp(input, "STOP") == 0) { // if user entered stop
 8000b92:	463b      	mov	r3, r7
 8000b94:	493f      	ldr	r1, [pc, #252]	; (8000c94 <run_project+0x1b8>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb1a 	bl	80001d0 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <run_project+0xd2>
					pause = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					stop();
 8000ba8:	f7ff ff90 	bl	8000acc <stop>
 8000bac:	e014      	b.n	8000bd8 <run_project+0xfc>
				}

				else{ // if user entered something other than the above commands
					printf("%s\r\n", "Invalid Command");
 8000bae:	493a      	ldr	r1, [pc, #232]	; (8000c98 <run_project+0x1bc>)
 8000bb0:	4834      	ldr	r0, [pc, #208]	; (8000c84 <run_project+0x1a8>)
 8000bb2:	f000 fcf9 	bl	80015a8 <printf>
 8000bb6:	e00f      	b.n	8000bd8 <run_project+0xfc>
				}
			}

			else if(byte != 0){ // if user did not hit enter, add byte to the buffer
 8000bb8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00b      	beq.n	8000bd8 <run_project+0xfc>
				input[buffer_index] = (char)byte;
 8000bc0:	463a      	mov	r2, r7
 8000bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bc6:	4413      	add	r3, r2
 8000bc8:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000bcc:	701a      	strb	r2, [r3, #0]
				buffer_index++;
 8000bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			}

			if(pause==1){ // if user enter pause, start flashing until pause flag is set back to 0
 8000bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d18d      	bne.n	8000afc <run_project+0x20>
				if(count == 1000000){
 8000be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000be4:	4a2d      	ldr	r2, [pc, #180]	; (8000c9c <run_project+0x1c0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d105      	bne.n	8000bf6 <run_project+0x11a>
					LED_Toggle(8);
 8000bea:	2008      	movs	r0, #8
 8000bec:	f7ff fc77 	bl	80004de <LED_Toggle>
					count = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				count++;
 8000bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000c00:	e77c      	b.n	8000afc <run_project+0x20>
			}
		}

		// local mode controls
		else if(mode == 1){
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <run_project+0x1a0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	f47f af78 	bne.w	8000afc <run_project+0x20>
			delay_systick(); // start systick timer
 8000c0c:	f000 fd7a 	bl	8001704 <delay_systick>

			if(systickTotal > 1000){ // if button is held down for over a second, stop
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <run_project+0x1c4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c18:	dd04      	ble.n	8000c24 <run_project+0x148>
				stop();
 8000c1a:	f7ff ff57 	bl	8000acc <stop>
				pause = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}

			if(pause_toggle == 1){ // if button is held down for less than a second, toggle play and pause
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <run_project+0x1c8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d105      	bne.n	8000c38 <run_project+0x15c>
				play();
 8000c2c:	f7ff ff22 	bl	8000a74 <play>
				pause = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c36:	e006      	b.n	8000c46 <run_project+0x16a>
			}
			else if(pause_toggle == 0){
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <run_project+0x1c8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <run_project+0x16a>
				pause = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}

			if(pause == 1){ // flash until pause is 0
 8000c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d10f      	bne.n	8000c6e <run_project+0x192>
				if(count == 100000){
 8000c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <run_project+0x1cc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d105      	bne.n	8000c64 <run_project+0x188>
					LED_Toggle(8);
 8000c58:	2008      	movs	r0, #8
 8000c5a:	f7ff fc40 	bl	80004de <LED_Toggle>
					count = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				count++;
 8000c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			}
			byte = USART_Read_Nonblocking(USART2); // resets buffer
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <run_project+0x1a4>)
 8000c70:	f7ff fd4a 	bl	8000708 <USART_Read_Nonblocking>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if(mode == 0){ //remote mode controls
 8000c7a:	e73f      	b.n	8000afc <run_project+0x20>
 8000c7c:	20007d54 	.word	0x20007d54
 8000c80:	40004400 	.word	0x40004400
 8000c84:	080028c8 	.word	0x080028c8
 8000c88:	08002968 	.word	0x08002968
 8000c8c:	08002970 	.word	0x08002970
 8000c90:	08002978 	.word	0x08002978
 8000c94:	08002980 	.word	0x08002980
 8000c98:	08002988 	.word	0x08002988
 8000c9c:	000f4240 	.word	0x000f4240
 8000ca0:	20007d68 	.word	0x20007d68
 8000ca4:	20007d6c 	.word	0x20007d6c
 8000ca8:	000186a0 	.word	0x000186a0

08000cac <getTempo>:
#include "trackparser.h"

int tempo = 0; // holds tempo of song

// reutrns tempo of current song
int getTempo() {
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	return tempo;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <getTempo+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20007d70 	.word	0x20007d70

08000cc4 <parseTitle>:
/**
 * parses the title of the current song
 * @param current_song- referene to the song currently being parsed
 * @param size- length of the current song array
 */
void parseTitle (unsigned char* current_song, int size) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	// gets title bytes
    for(int i = 0; i < size; i++){
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e02f      	b.n	8000d34 <parseTitle+0x70>
    	if (current_song[i] == 0xFF && current_song[i+1] == 0x03){
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2bff      	cmp	r3, #255	; 0xff
 8000cde:	d126      	bne.n	8000d2e <parseTitle+0x6a>
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d11f      	bne.n	8000d2e <parseTitle+0x6a>
            int index = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
            int length = current_song[i+2];
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]

            printf("%s", "Song Title: ");
 8000cfe:	4912      	ldr	r1, [pc, #72]	; (8000d48 <parseTitle+0x84>)
 8000d00:	4812      	ldr	r0, [pc, #72]	; (8000d4c <parseTitle+0x88>)
 8000d02:	f000 fc51 	bl	80015a8 <printf>

            while(index < length){
 8000d06:	e00d      	b.n	8000d24 <parseTitle+0x60>
                printf("%c", current_song[i+3]);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3303      	adds	r3, #3
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fc3a 	bl	800158c <putchar>
                i++;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
                index++;
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	3301      	adds	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
            while(index < length){
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbed      	blt.n	8000d08 <parseTitle+0x44>
            }
            break;
 8000d2c:	e007      	b.n	8000d3e <parseTitle+0x7a>
    for(int i = 0; i < size; i++){
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbcb      	blt.n	8000cd4 <parseTitle+0x10>
        }
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	08002998 	.word	0x08002998
 8000d4c:	080029a8 	.word	0x080029a8

08000d50 <parseCopyright>:
/**
 * parses the copyright of the current song
 * @param current_song- referene to the song currently being parsed
 * @param size- length of the current song array
 */
void parseCopyright (unsigned char* current_song, int size) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	// gets copyright bytes
    for(int i = 0; i < size; i++){
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e02f      	b.n	8000dc0 <parseCopyright+0x70>
        if (current_song[i] == 0xFF && current_song[i+1] == 0x02){
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2bff      	cmp	r3, #255	; 0xff
 8000d6a:	d126      	bne.n	8000dba <parseCopyright+0x6a>
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d11f      	bne.n	8000dba <parseCopyright+0x6a>
            int index = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
            int length = current_song[i+2];
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3302      	adds	r3, #2
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]

            printf("%s", "  Copyright: ");
 8000d8a:	4912      	ldr	r1, [pc, #72]	; (8000dd4 <parseCopyright+0x84>)
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <parseCopyright+0x88>)
 8000d8e:	f000 fc0b 	bl	80015a8 <printf>

            while(index < length){
 8000d92:	e00d      	b.n	8000db0 <parseCopyright+0x60>
	            printf("%c", current_song[i+3]);
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3303      	adds	r3, #3
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fbf4 	bl	800158c <putchar>
	            i++;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
	            index++;
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	3301      	adds	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
            while(index < length){
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbed      	blt.n	8000d94 <parseCopyright+0x44>
	        }
            break;
 8000db8:	e007      	b.n	8000dca <parseCopyright+0x7a>
    for(int i = 0; i < size; i++){
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbcb      	blt.n	8000d60 <parseCopyright+0x10>
        }
    }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	080029ac 	.word	0x080029ac
 8000dd8:	080029a8 	.word	0x080029a8

08000ddc <parseTempo>:
/**
 * parses the tempo of the current song. also sets tempo
 * @param current_song- referene to the song currently being parsed
 * @param size- length of the current song array
 */
void parseTempo(unsigned char* current_song, int size) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	// gets tempo bytes
    for (int i = 0; i < size; i++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e02f      	b.n	8000e4c <parseTempo+0x70>
        if (current_song[i] == 0xFF && current_song[i+1] == 0x51){
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2bff      	cmp	r3, #255	; 0xff
 8000df6:	d126      	bne.n	8000e46 <parseTempo+0x6a>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b51      	cmp	r3, #81	; 0x51
 8000e04:	d11f      	bne.n	8000e46 <parseTempo+0x6a>
            printf("%s", "  Tempo: ");
 8000e06:	4916      	ldr	r1, [pc, #88]	; (8000e60 <parseTempo+0x84>)
 8000e08:	4816      	ldr	r0, [pc, #88]	; (8000e64 <parseTempo+0x88>)
 8000e0a:	f000 fbcd 	bl	80015a8 <printf>

            int temp = ((current_song[i + 3]<<16) | (current_song[i+4]<<8) | (current_song[i+5]));
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3303      	adds	r3, #3
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	041a      	lsls	r2, r3, #16
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	440b      	add	r3, r1
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	4313      	orrs	r3, r2
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	3205      	adds	r2, #5
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	440a      	add	r2, r1
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
            tempo = temp;
 8000e36:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <parseTempo+0x8c>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	6013      	str	r3, [r2, #0]

            printf("%d\r\n",  temp);
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <parseTempo+0x90>)
 8000e40:	f000 fbb2 	bl	80015a8 <printf>
            break;
 8000e44:	e007      	b.n	8000e56 <parseTempo+0x7a>
    for (int i = 0; i < size; i++){
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbcb      	blt.n	8000dec <parseTempo+0x10>
        }
    }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	080029bc 	.word	0x080029bc
 8000e64:	080029a8 	.word	0x080029a8
 8000e68:	20007d70 	.word	0x20007d70
 8000e6c:	080029c8 	.word	0x080029c8

08000e70 <createTrackArray>:

/**
 * uses current_song and its size to create an array of bytes containing
 * only information regarding the track.
 */
unsigned char* createTrackArray(unsigned char* current_song, int size) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	int index = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]

    int trackStartPosition = 0; // once set, hold the index of the entire song where the track begins
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < size; i++){
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	e020      	b.n	8000eca <createTrackArray+0x5a>
        if (current_song[i] == 0x4d && current_song[i+1] == 0x54 && current_song[i+2] == 0x72 && current_song[i+3] == 0x6b){
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b4d      	cmp	r3, #77	; 0x4d
 8000e92:	d117      	bne.n	8000ec4 <createTrackArray+0x54>
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b54      	cmp	r3, #84	; 0x54
 8000ea0:	d110      	bne.n	8000ec4 <createTrackArray+0x54>
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b72      	cmp	r3, #114	; 0x72
 8000eae:	d109      	bne.n	8000ec4 <createTrackArray+0x54>
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	3303      	adds	r3, #3
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b6b      	cmp	r3, #107	; 0x6b
 8000ebc:	d102      	bne.n	8000ec4 <createTrackArray+0x54>
            trackStartPosition = i+8; // + 8 so that chunk type and length are not stored
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < size; i++){
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbda      	blt.n	8000e88 <createTrackArray+0x18>
        }
    }

    int track_size = size - trackStartPosition; // size of track
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	613b      	str	r3, [r7, #16]
    unsigned char* track_info = (unsigned char*)malloc(track_size); // allocate memory to copy array
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 ffed 	bl	8001ebc <malloc>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60fb      	str	r3, [r7, #12]

    while (trackStartPosition < size){ // while not at end of file, copy current song into track_info 1 for 1
 8000ee6:	e00d      	b.n	8000f04 <createTrackArray+0x94>
        track_info[index] = current_song[trackStartPosition];
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	441a      	add	r2, r3
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	68f9      	ldr	r1, [r7, #12]
 8000ef2:	440b      	add	r3, r1
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	701a      	strb	r2, [r3, #0]
        trackStartPosition++;
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
        index++;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
    while (trackStartPosition < size){ // while not at end of file, copy current song into track_info 1 for 1
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbed      	blt.n	8000ee8 <createTrackArray+0x78>
    }

    return track_info;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <parsenext>:
 * into their assigned array, and converts those
 * bytes into characters. Prints out the information
 * Every time called, cycles through to the next song in
 * the array
 */
void parsenext(unsigned char* current_song, int size){
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
    parseTitle(current_song, size);
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fece 	bl	8000cc4 <parseTitle>
    parseCopyright(current_song, size);
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff10 	bl	8000d50 <parseCopyright>
    parseTempo(current_song, size);
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff52 	bl	8000ddc <parseTempo>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8000f40:	b490      	push	{r4, r7}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <get_song+0x2c>)
 8000f52:	460c      	mov	r4, r1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f5c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc90      	pop	{r4, r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20007aa4 	.word	0x20007aa4

08000f70 <SysTick_Handler>:
static tone_info tones[MAX_TONES] = {{0,0}};

/* You will want to integrate this with your existing one
   but it is here for standalone testing                 
*/
void SysTick_Handler() {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	counter++;
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Handler+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <SysTick_Handler+0x18>)
 8000f7c:	6013      	str	r3, [r2, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	20007d74 	.word	0x20007d74

08000f8c <hertz_to_duration>:

uint32_t get_tick_speed ();


// Convert from hertz to ticks
uint32_t hertz_to_duration (float hertz) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t tick_speed = TICK_SPEED; // This is a hack, you'll fix it later
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <hertz_to_duration+0x58>)
 8000f98:	60fb      	str	r3, [r7, #12]
	if (hertz == 0)
 8000f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	d101      	bne.n	8000fac <hertz_to_duration+0x20>
		return 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e014      	b.n	8000fd6 <hertz_to_duration+0x4a>
	float duration = 1 / hertz;
 8000fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb8:	edc7 7a02 	vstr	s15, [r7, #8]
	return (uint32_t) (duration * tick_speed);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd2:	ee17 3a90 	vmov	r3, s15
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	000f4240 	.word	0x000f4240

08000fe8 <get_counter>:

// Accessor for the counter
uint32_t get_counter () {
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	return counter;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <get_counter+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20007d74 	.word	0x20007d74

08001000 <reset_counter>:

void reset_counter () {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	counter = 0;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <reset_counter+0x14>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20007d74 	.word	0x20007d74

08001018 <add_tone>:

// Add a tone to the tones array
uint8_t add_tone (uint8_t note, uint8_t velocity) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
	tones [0] = (tone_info){hertz_to_duration (notes [note]), velocity};
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <add_tone+0x40>)
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	eeb0 0a67 	vmov.f32	s0, s15
 8001038:	f7ff ffa8 	bl	8000f8c <hertz_to_duration>
 800103c:	4603      	mov	r3, r0
 800103e:	79ba      	ldrb	r2, [r7, #6]
 8001040:	b291      	uxth	r1, r2
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <add_tone+0x44>)
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <add_tone+0x44>)
 8001048:	460a      	mov	r2, r1
 800104a:	809a      	strh	r2, [r3, #4]
	return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20007acc 	.word	0x20007acc
 800105c:	20007d78 	.word	0x20007d78

08001060 <remove_tone>:

// Remove a tone from the tones array
uint8_t remove_tone (uint8_t note) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	tones [0].duration = hertz_to_duration (notes [note]);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4a09      	ldr	r2, [pc, #36]	; (8001094 <remove_tone+0x34>)
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	eeb0 0a67 	vmov.f32	s0, s15
 800107a:	f7ff ff87 	bl	8000f8c <hertz_to_duration>
 800107e:	4603      	mov	r3, r0
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <remove_tone+0x38>)
 8001082:	6013      	str	r3, [r2, #0]
	tones [0].power = 0;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <remove_tone+0x38>)
 8001086:	2200      	movs	r2, #0
 8001088:	809a      	strh	r2, [r3, #4]
	return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20007acc 	.word	0x20007acc
 8001098:	20007d78 	.word	0x20007d78

0800109c <play_tones>:

// Play any tones in the array
void play_tones (int totalDelay) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	DAC_Init();
 80010a4:	f7ff fbd8 	bl	8000858 <DAC_Init>
	DAC_Start();
 80010a8:	f7ff fc08 	bl	80008bc <DAC_Start>

	while(get_counter() < totalDelay){ //while delay of event, play note
 80010ac:	e01e      	b.n	80010ec <play_tones+0x50>
		if (get_counter() % tones[0].duration < (tones[0].duration >> 1)) {
 80010ae:	f7ff ff9b 	bl	8000fe8 <get_counter>
 80010b2:	4602      	mov	r2, r0
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <play_tones+0x68>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80010bc:	fb01 f303 	mul.w	r3, r1, r3
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <play_tones+0x68>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	085b      	lsrs	r3, r3, #1
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d20a      	bcs.n	80010e2 <play_tones+0x46>
			DAC_Set_Value(tones[0].power*20);
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <play_tones+0x68>)
 80010ce:	889b      	ldrh	r3, [r3, #4]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fbf8 	bl	80008d0 <DAC_Set_Value>
 80010e0:	e004      	b.n	80010ec <play_tones+0x50>
		}
		else{
			DAC_Set_Value(tones[0].power);
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <play_tones+0x68>)
 80010e4:	889b      	ldrh	r3, [r3, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fbf2 	bl	80008d0 <DAC_Set_Value>
	while(get_counter() < totalDelay){ //while delay of event, play note
 80010ec:	f7ff ff7c 	bl	8000fe8 <get_counter>
 80010f0:	4602      	mov	r2, r0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3da      	bcc.n	80010ae <play_tones+0x12>
		}
	}
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20007d78 	.word	0x20007d78

08001108 <structs>:

/**
 * originally from class activity. takes in current song number
 * and creates a header struct from it.
 */
void structs(int song_num) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	ptr_head = (struct header*)get_song(song_num).p_song;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff10 	bl	8000f40 <get_song>
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <structs+0x3c>)
 8001124:	6013      	str	r3, [r2, #0]

	char buffer[5];
	strncpy(buffer, ptr_head->type, sizeof(ptr_head->type)); // copy bytes from song file into buffer
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <structs+0x3c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2204      	movs	r2, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f000 ffa6 	bl	8002084 <strncpy>
	buffer[sizeof ( ptr_head->type)] = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	733b      	strb	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200083c0 	.word	0x200083c0

08001148 <parse_delay>:
 * takes in an array of bytes to calculate delay. since the delay
 * of each event can vary in length, this function takes an array
 * and calculates the exact decimal value of each event and
 * returns it
 */
uint32_t parse_delay (uint8_t* delay){
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
	uint8_t currentByte;

	do {
	  currentByte = *delay++;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	72fb      	strb	r3, [r7, #11]
	  result = (result << 7) | (currentByte & 0x7F);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	01da      	lsls	r2, r3, #7
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001168:	4313      	orrs	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
	} while (currentByte & 0x80);
 800116c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dbef      	blt.n	8001154 <parse_delay+0xc>

	return result;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <parseTrack>:
 * Goes byte by byte parsing it and figures out its meaning
 * based on midi file format. first parses delay, then type,
 * and values (key and velocity) relative to that type and
 * stores it in a noteEvent struct. added to events[]
 */
void parseTrack(unsigned char* track_info) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	int index = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]

	while (track_info[index] != 0x2f || track_info[index + 1] != 0x00){ // while not at end of track
 8001190:	e06b      	b.n	800126a <parseTrack+0xe6>
		uint8_t delay_placeholder[5]; // used to hold delays for the current event being parsed. sent to parseDelay()
		int delay_index = 0; // index for delay_placeholder
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
		struct noteEvent* current_event = malloc(sizeof(struct noteEvent)); // initialize struct to serve as the current event being parsed
 8001196:	2008      	movs	r0, #8
 8001198:	f000 fe90 	bl	8001ebc <malloc>
 800119c:	4603      	mov	r3, r0
 800119e:	613b      	str	r3, [r7, #16]

		while (track_info[index] & 0x80){ //while byte is pertaining to delay
 80011a0:	e00f      	b.n	80011c2 <parseTrack+0x3e>
			delay_placeholder[delay_index] = track_info[index]; // add it to delay_placeholder
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	7819      	ldrb	r1, [r3, #0]
 80011aa:	f107 0208 	add.w	r2, r7, #8
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4413      	add	r3, r2
 80011b2:	460a      	mov	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
			delay_index++; //increment both indexes
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
			index++; // "
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	3301      	adds	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
		while (track_info[index] & 0x80){ //while byte is pertaining to delay
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dbe8      	blt.n	80011a2 <parseTrack+0x1e>
		}

		delay_placeholder[delay_index] = track_info[index]; // if delay is only one byte, add it
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	7819      	ldrb	r1, [r3, #0]
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4413      	add	r3, r2
 80011e0:	460a      	mov	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]

		current_event->delay = parse_delay(delay_placeholder);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffad 	bl	8001148 <parse_delay>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	601a      	str	r2, [r3, #0]

		index++;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	3301      	adds	r3, #1
 80011f8:	61fb      	str	r3, [r7, #28]

		current_event->type = track_info[index]; // add the type to current_event
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	711a      	strb	r2, [r3, #4]

		if ((current_event->type & 0xF0) == 0x90 || (current_event->type & 0xF0) == 0x80) { // if note on event, add key and velocity to struct
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120e:	2b90      	cmp	r3, #144	; 0x90
 8001210:	d005      	beq.n	800121e <parseTrack+0x9a>
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121a:	2b80      	cmp	r3, #128	; 0x80
 800121c:	d111      	bne.n	8001242 <parseTrack+0xbe>
		            current_event->key = track_info[index + 1];
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	715a      	strb	r2, [r3, #5]
		            current_event->velo = track_info[index + 2];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3302      	adds	r3, #2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4413      	add	r3, r2
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	719a      	strb	r2, [r3, #6]
		            index += 3; // Move index to the next event
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3303      	adds	r3, #3
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e008      	b.n	8001254 <parseTrack+0xd0>
		        } else { // if note off, key and velocity are 0
		            current_event->key = 0;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2200      	movs	r2, #0
 8001246:	715a      	strb	r2, [r3, #5]
		            current_event->velo = 0;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2200      	movs	r2, #0
 800124c:	719a      	strb	r2, [r3, #6]
		            index++;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3301      	adds	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
		        }
		events[eventIndex] = current_event; // add current event to events[]
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <parseTrack+0x130>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4917      	ldr	r1, [pc, #92]	; (80012b8 <parseTrack+0x134>)
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		eventIndex++;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <parseTrack+0x130>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <parseTrack+0x130>)
 8001268:	6013      	str	r3, [r2, #0]
	while (track_info[index] != 0x2f || track_info[index + 1] != 0x00){ // while not at end of track
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2f      	cmp	r3, #47	; 0x2f
 8001274:	d18d      	bne.n	8001192 <parseTrack+0xe>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d186      	bne.n	8001192 <parseTrack+0xe>
	}

	for (int i = 0; i < eventIndex; i++) { //free up the memory used
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e009      	b.n	800129e <parseTrack+0x11a>
	    free(events[i]);
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <parseTrack+0x134>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fe1a 	bl	8001ecc <free>
	for (int i = 0; i < eventIndex; i++) { //free up the memory used
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <parseTrack+0x130>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbf0      	blt.n	800128a <parseTrack+0x106>
	}
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200083c4 	.word	0x200083c4
 80012b8:	20007d80 	.word	0x20007d80

080012bc <playSong>:
/**
 * takes in current song number and tempo, gets everything ready to make music.
 * calculates how many microseconds are in a midi tick, then uses that, as well
 * as some functions from tone.c to play the song
 */
void playSong (int current_song_num, int tempo) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	structs(current_song_num); // create header struct
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff1e 	bl	8001108 <structs>
	uint16_t division = convert_to_uint16(ptr_head->division); // get division from the header created
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <playSong+0xe4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	899b      	ldrh	r3, [r3, #12]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7fe ffdc 	bl	8000290 <convert_to_uint16>
 80012d8:	4603      	mov	r3, r0
 80012da:	82fb      	strh	r3, [r7, #22]

	int miditick = tempo / division; // calculate how many systick ticks are in a midi tick
 80012dc:	8afb      	ldrh	r3, [r7, #22]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	613b      	str	r3, [r7, #16]
	int totalDelay = 0; // holds total delay of song as its being played
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]

	reset_counter();
 80012ea:	f7ff fe89 	bl	8001000 <reset_counter>

	for(int i = 0; i < eventIndex; i++) { // for each event in the song
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	e04a      	b.n	800138a <playSong+0xce>
//		printf("h");
		if((events[i]->type & 0xF0) == 0x90){ // if note on event
 80012f4:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <playSong+0xe8>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	791b      	ldrb	r3, [r3, #4]
 80012fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001302:	2b90      	cmp	r3, #144	; 0x90
 8001304:	d11c      	bne.n	8001340 <playSong+0x84>
			int delay = (events[i+1]->delay) * miditick; // get the delay of the event
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	3301      	adds	r3, #1
 800130a:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <playSong+0xe8>)
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	60bb      	str	r3, [r7, #8]
			totalDelay += delay; // add it to total
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4413      	add	r3, r2
 8001320:	61fb      	str	r3, [r7, #28]
			add_tone(events[i]->key, events[i]->velo); // adds to tones[] in tone.c to be played
 8001322:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <playSong+0xe8>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	795a      	ldrb	r2, [r3, #5]
 800132c:	491d      	ldr	r1, [pc, #116]	; (80013a4 <playSong+0xe8>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001334:	799b      	ldrb	r3, [r3, #6]
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f7ff fe6d 	bl	8001018 <add_tone>
 800133e:	e01e      	b.n	800137e <playSong+0xc2>
		}
		else if((events[i]->type & 0xF0) == 0x80){ // if note off
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <playSong+0xe8>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	791b      	ldrb	r3, [r3, #4]
 800134a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800134e:	2b80      	cmp	r3, #128	; 0x80
 8001350:	d115      	bne.n	800137e <playSong+0xc2>
			int delay = (events[i+1]->delay) * miditick; // calculate delay
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	3301      	adds	r3, #1
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <playSong+0xe8>)
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	60fb      	str	r3, [r7, #12]
			totalDelay += delay; // add it to total
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	61fb      	str	r3, [r7, #28]
			remove_tone(events[i]->key); // remove it from tones[]
 800136e:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <playSong+0xe8>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	795b      	ldrb	r3, [r3, #5]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe71 	bl	8001060 <remove_tone>
		}

		play_tones(totalDelay); // play tones[]
 800137e:	69f8      	ldr	r0, [r7, #28]
 8001380:	f7ff fe8c 	bl	800109c <play_tones>
	for(int i = 0; i < eventIndex; i++) { // for each event in the song
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	3301      	adds	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <playSong+0xec>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbaf      	blt.n	80012f4 <playSong+0x38>
	}
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200083c0 	.word	0x200083c0
 80013a4:	20007d80 	.word	0x20007d80
 80013a8:	200083c4 	.word	0x200083c4

080013ac <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80013b2:	4b6b      	ldr	r3, [pc, #428]	; (8001560 <System_Clock_Init+0x1b4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6a      	ldr	r2, [pc, #424]	; (8001560 <System_Clock_Init+0x1b4>)
 80013b8:	f023 0307 	bic.w	r3, r3, #7
 80013bc:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80013be:	4b68      	ldr	r3, [pc, #416]	; (8001560 <System_Clock_Init+0x1b4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a67      	ldr	r2, [pc, #412]	; (8001560 <System_Clock_Init+0x1b4>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80013ca:	4b66      	ldr	r3, [pc, #408]	; (8001564 <System_Clock_Init+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a65      	ldr	r2, [pc, #404]	; (8001564 <System_Clock_Init+0x1b8>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80013d6:	bf00      	nop
 80013d8:	4b62      	ldr	r3, [pc, #392]	; (8001564 <System_Clock_Init+0x1b8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f9      	beq.n	80013d8 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80013e4:	2310      	movs	r3, #16
 80013e6:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80013e8:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <System_Clock_Init+0x1b8>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a5d      	ldr	r2, [pc, #372]	; (8001564 <System_Clock_Init+0x1b8>)
 80013ee:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80013f2:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80013f4:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <System_Clock_Init+0x1b8>)
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	061b      	lsls	r3, r3, #24
 80013fc:	4959      	ldr	r1, [pc, #356]	; (8001564 <System_Clock_Init+0x1b8>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8001402:	4b58      	ldr	r3, [pc, #352]	; (8001564 <System_Clock_Init+0x1b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <System_Clock_Init+0x1b8>)
 8001408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800140c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800140e:	bf00      	nop
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <System_Clock_Init+0x1b8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800141c:	d0f8      	beq.n	8001410 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800141e:	4b51      	ldr	r3, [pc, #324]	; (8001564 <System_Clock_Init+0x1b8>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	4a50      	ldr	r2, [pc, #320]	; (8001564 <System_Clock_Init+0x1b8>)
 8001424:	f023 0303 	bic.w	r3, r3, #3
 8001428:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <System_Clock_Init+0x1b8>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <System_Clock_Init+0x1b8>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <System_Clock_Init+0x1b8>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800143e:	4a49      	ldr	r2, [pc, #292]	; (8001564 <System_Clock_Init+0x1b8>)
 8001440:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001444:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <System_Clock_Init+0x1b8>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800144e:	4a45      	ldr	r2, [pc, #276]	; (8001564 <System_Clock_Init+0x1b8>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <System_Clock_Init+0x1b8>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	4a42      	ldr	r2, [pc, #264]	; (8001564 <System_Clock_Init+0x1b8>)
 800145c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001460:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8001462:	4b40      	ldr	r3, [pc, #256]	; (8001564 <System_Clock_Init+0x1b8>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	4a3f      	ldr	r2, [pc, #252]	; (8001564 <System_Clock_Init+0x1b8>)
 8001468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146c:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <System_Clock_Init+0x1b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a3c      	ldr	r2, [pc, #240]	; (8001564 <System_Clock_Init+0x1b8>)
 8001474:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001478:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800147a:	bf00      	nop
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <System_Clock_Init+0x1b8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f9      	beq.n	800147c <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <System_Clock_Init+0x1b8>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a35      	ldr	r2, [pc, #212]	; (8001564 <System_Clock_Init+0x1b8>)
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <System_Clock_Init+0x1b8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a32      	ldr	r2, [pc, #200]	; (8001564 <System_Clock_Init+0x1b8>)
 800149a:	f043 0303 	orr.w	r3, r3, #3
 800149e:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80014a0:	bf00      	nop
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <System_Clock_Init+0x1b8>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d1f9      	bne.n	80014a2 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <System_Clock_Init+0x1b8>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <System_Clock_Init+0x1b8>)
 80014b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <System_Clock_Init+0x1b8>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <System_Clock_Init+0x1b8>)
 80014c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014c4:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <System_Clock_Init+0x1b8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	4a26      	ldr	r2, [pc, #152]	; (8001564 <System_Clock_Init+0x1b8>)
 80014cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014d0:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <System_Clock_Init+0x1b8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <System_Clock_Init+0x1b8>)
 80014d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80014dc:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80014de:	bf00      	nop
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <System_Clock_Init+0x1b8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014ec:	d0f8      	beq.n	80014e0 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <System_Clock_Init+0x1b8>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <System_Clock_Init+0x1b8>)
 80014f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80014f8:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <System_Clock_Init+0x1b8>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <System_Clock_Init+0x1b8>)
 8001500:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8001504:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <System_Clock_Init+0x1b8>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a16      	ldr	r2, [pc, #88]	; (8001564 <System_Clock_Init+0x1b8>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <System_Clock_Init+0x1b8>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <System_Clock_Init+0x1b8>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <System_Clock_Init+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <System_Clock_Init+0x1b8>)
 8001524:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001528:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800152a:	bf00      	nop
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <System_Clock_Init+0x1b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f9      	beq.n	800152c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <System_Clock_Init+0x1b8>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <System_Clock_Init+0x1b8>)
 8001540:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <System_Clock_Init+0x1b8>)
 800154a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <System_Clock_Init+0x1b8>)
 800154e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001552:	6613      	str	r3, [r2, #96]	; 0x60
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40022000 	.word	0x40022000
 8001564:	40021000 	.word	0x40021000

08001568 <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <print_string+0x20>)
 800157a:	f7ff f8db 	bl	8000734 <USART_Write>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40004400 	.word	0x40004400

0800158c <putchar>:
    print_string (string, len);
    print_string ("\n", 1);
    return len;
}

int putchar (int chr){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    print_string ((char*)&chr, 1);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2101      	movs	r1, #1
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffe5 	bl	8001568 <print_string>
    return chr;
 800159e:	687b      	ldr	r3, [r7, #4]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <printf>:

int printf (const char* format, ...) {
 80015a8:	b40f      	push	{r0, r1, r2, r3}
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <printf+0x34>)
 80015bc:	f000 fd50 	bl	8002060 <vsiprintf>
 80015c0:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <printf+0x34>)
 80015c6:	f7ff ffcf 	bl	8001568 <print_string>

    return(ret);
 80015ca:	687b      	ldr	r3, [r7, #4]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015d6:	b004      	add	sp, #16
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200083c8 	.word	0x200083c8

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f000 fd5c 	bl	80020cc <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20018000 	.word	0x20018000
 8001640:	00000400 	.word	0x00000400
 8001644:	20008448 	.word	0x20008448
 8001648:	20008598 	.word	0x20008598

0800164c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <SystemInit+0x64>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <SystemInit+0x64>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <SystemInit+0x68>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <SystemInit+0x68>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <SystemInit+0x68>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SystemInit+0x68>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <SystemInit+0x68>)
 8001678:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800167c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001680:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <SystemInit+0x68>)
 8001684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001688:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <SystemInit+0x68>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <SystemInit+0x68>)
 8001690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <SystemInit+0x68>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SystemInit+0x64>)
 800169e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a2:	609a      	str	r2, [r3, #8]
#endif
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	40021000 	.word	0x40021000

080016b8 <init_systick>:


struct systick* SYS_TICK = (struct systick*) 0xE000E010;
// This function is to Initialize SysTick registers
void init_systick()
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	//sets timer to 1ms
	SYS_TICK->RVR = 79;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <init_systick+0x48>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	224f      	movs	r2, #79	; 0x4f
 80016c2:	605a      	str	r2, [r3, #4]
	SYS_TICK->CSR = SYS_TICK->CSR | (1<<2);
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <init_systick+0x48>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <init_systick+0x48>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0204 	orr.w	r2, r2, #4
 80016d2:	601a      	str	r2, [r3, #0]
	SYS_TICK->CSR = SYS_TICK->CSR | (1<<1);
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <init_systick+0x48>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <init_systick+0x48>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0202 	orr.w	r2, r2, #2
 80016e2:	601a      	str	r2, [r3, #0]
	SYS_TICK->CSR = SYS_TICK->CSR | (1<<0);
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <init_systick+0x48>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <init_systick+0x48>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20007ccc 	.word	0x20007ccc

08001704 <delay_systick>:

// This function is to create delay using SysTick timer counter
void delay_systick()
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
	while(!(SYS_TICK->CSR & (1<<16)));
 8001708:	bf00      	nop
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <delay_systick+0x20>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f8      	beq.n	800170a <delay_systick+0x6>
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20007ccc 	.word	0x20007ccc

08001728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800172c:	f7ff ff8e 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <LoopForever+0x6>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	; (8001768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <LoopForever+0xe>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	; (8001774 <LoopForever+0x16>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f000 fcbf 	bl	80020d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175a:	f7ff f8c9 	bl	80008f0 <main>

0800175e <LoopForever>:

LoopForever:
    b LoopForever
 800175e:	e7fe      	b.n	800175e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001760:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20007d24 	.word	0x20007d24
  ldr r2, =_sidata
 800176c:	08002a08 	.word	0x08002a08
  ldr r2, =_sbss
 8001770:	20007d24 	.word	0x20007d24
  ldr r4, =_ebss
 8001774:	20008598 	.word	0x20008598

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>
	...

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000844c 	.word	0x2000844c

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20007cd0 	.word	0x20007cd0

080017dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e014      	b.n	8001818 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	791b      	ldrb	r3, [r3, #4]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7fe ffec 	bl	80007dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	795b      	ldrb	r3, [r3, #5]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_DAC_Start+0x16>
 8001832:	2302      	movs	r3, #2
 8001834:	e03b      	b.n	80018ae <HAL_DAC_Start+0x8e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2201      	movs	r2, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10f      	bne.n	8001880 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800186a:	2b04      	cmp	r3, #4
 800186c:	d118      	bne.n	80018a0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e00f      	b.n	80018a0 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800188a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800188e:	d107      	bne.n	80018a0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0202 	orr.w	r2, r2, #2
 800189e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b087      	sub	sp, #28
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	3308      	adds	r3, #8
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e004      	b.n	80018ee <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	3314      	adds	r3, #20
 80018ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	461a      	mov	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	795b      	ldrb	r3, [r3, #5]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_DAC_ConfigChannel+0x1c>
 800191c:	2302      	movs	r3, #2
 800191e:	e107      	b.n	8001b30 <HAL_DAC_ConfigChannel+0x22c>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2202      	movs	r2, #2
 800192a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d174      	bne.n	8001a1e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001934:	f7ff ff22 	bl	800177c <HAL_GetTick>
 8001938:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d134      	bne.n	80019aa <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001940:	e011      	b.n	8001966 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001942:	f7ff ff1b 	bl	800177c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d90a      	bls.n	8001966 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f043 0208 	orr.w	r2, r3, #8
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2203      	movs	r2, #3
 8001960:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0e4      	b.n	8001b30 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e6      	bne.n	8001942 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff ff0d 	bl	8001794 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	6992      	ldr	r2, [r2, #24]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
 8001984:	e01e      	b.n	80019c4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001986:	f7ff fef9 	bl	800177c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d90a      	bls.n	80019aa <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f043 0208 	orr.w	r2, r3, #8
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2203      	movs	r2, #3
 80019a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0c2      	b.n	8001b30 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	dbe8      	blt.n	8001986 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff feed 	bl	8001794 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	6992      	ldr	r2, [r2, #24]
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	ea02 0103 	and.w	r1, r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	409a      	lsls	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	21ff      	movs	r1, #255	; 0xff
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	ea02 0103 	and.w	r1, r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6a1a      	ldr	r2, [r3, #32]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d11d      	bne.n	8001a62 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	221f      	movs	r2, #31
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2207      	movs	r2, #7
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6819      	ldr	r1, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6819      	ldr	r1, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	22c0      	movs	r2, #192	; 0xc0
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	400a      	ands	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e17f      	b.n	8001e48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8171 	beq.w	8001e42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d005      	beq.n	8001b78 <HAL_GPIO_Init+0x40>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d130      	bne.n	8001bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bae:	2201      	movs	r2, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f003 0201 	and.w	r2, r3, #1
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d118      	bne.n	8001c18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80ac 	beq.w	8001e42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_GPIO_Init+0x330>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	4a5e      	ldr	r2, [pc, #376]	; (8001e68 <HAL_GPIO_Init+0x330>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf6:	4b5c      	ldr	r3, [pc, #368]	; (8001e68 <HAL_GPIO_Init+0x330>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d02:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_GPIO_Init+0x334>)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d2c:	d025      	beq.n	8001d7a <HAL_GPIO_Init+0x242>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4f      	ldr	r2, [pc, #316]	; (8001e70 <HAL_GPIO_Init+0x338>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_GPIO_Init+0x23e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4e      	ldr	r2, [pc, #312]	; (8001e74 <HAL_GPIO_Init+0x33c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x23a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4d      	ldr	r2, [pc, #308]	; (8001e78 <HAL_GPIO_Init+0x340>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x236>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_GPIO_Init+0x344>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x232>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4b      	ldr	r2, [pc, #300]	; (8001e80 <HAL_GPIO_Init+0x348>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x22e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_GPIO_Init+0x34c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x22a>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e00c      	b.n	8001d7c <HAL_GPIO_Init+0x244>
 8001d62:	2307      	movs	r3, #7
 8001d64:	e00a      	b.n	8001d7c <HAL_GPIO_Init+0x244>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e008      	b.n	8001d7c <HAL_GPIO_Init+0x244>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x244>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e004      	b.n	8001d7c <HAL_GPIO_Init+0x244>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_Init+0x244>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x244>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4093      	lsls	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d8c:	4937      	ldr	r1, [pc, #220]	; (8001e6c <HAL_GPIO_Init+0x334>)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dbe:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dc4:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e12:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e3c:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f47f ae78 	bne.w	8001b48 <HAL_GPIO_Init+0x10>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	48000400 	.word	0x48000400
 8001e74:	48000800 	.word	0x48000800
 8001e78:	48000c00 	.word	0x48000c00
 8001e7c:	48001000 	.word	0x48001000
 8001e80:	48001400 	.word	0x48001400
 8001e84:	48001800 	.word	0x48001800
 8001e88:	40010400 	.word	0x40010400

08001e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e001      	b.n	8001eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <malloc>:
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <malloc+0xc>)
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	f000 b82b 	b.w	8001f1c <_malloc_r>
 8001ec6:	bf00      	nop
 8001ec8:	20007d20 	.word	0x20007d20

08001ecc <free>:
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <free+0xc>)
 8001ece:	4601      	mov	r1, r0
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f000 b927 	b.w	8002124 <_free_r>
 8001ed6:	bf00      	nop
 8001ed8:	20007d20 	.word	0x20007d20

08001edc <sbrk_aligned>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	4e0e      	ldr	r6, [pc, #56]	; (8001f18 <sbrk_aligned+0x3c>)
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	6831      	ldr	r1, [r6, #0]
 8001ee4:	4605      	mov	r5, r0
 8001ee6:	b911      	cbnz	r1, 8001eee <sbrk_aligned+0x12>
 8001ee8:	f000 f8e0 	bl	80020ac <_sbrk_r>
 8001eec:	6030      	str	r0, [r6, #0]
 8001eee:	4621      	mov	r1, r4
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f000 f8db 	bl	80020ac <_sbrk_r>
 8001ef6:	1c43      	adds	r3, r0, #1
 8001ef8:	d00a      	beq.n	8001f10 <sbrk_aligned+0x34>
 8001efa:	1cc4      	adds	r4, r0, #3
 8001efc:	f024 0403 	bic.w	r4, r4, #3
 8001f00:	42a0      	cmp	r0, r4
 8001f02:	d007      	beq.n	8001f14 <sbrk_aligned+0x38>
 8001f04:	1a21      	subs	r1, r4, r0
 8001f06:	4628      	mov	r0, r5
 8001f08:	f000 f8d0 	bl	80020ac <_sbrk_r>
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d101      	bne.n	8001f14 <sbrk_aligned+0x38>
 8001f10:	f04f 34ff 	mov.w	r4, #4294967295
 8001f14:	4620      	mov	r0, r4
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	20008454 	.word	0x20008454

08001f1c <_malloc_r>:
 8001f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f20:	1ccd      	adds	r5, r1, #3
 8001f22:	f025 0503 	bic.w	r5, r5, #3
 8001f26:	3508      	adds	r5, #8
 8001f28:	2d0c      	cmp	r5, #12
 8001f2a:	bf38      	it	cc
 8001f2c:	250c      	movcc	r5, #12
 8001f2e:	2d00      	cmp	r5, #0
 8001f30:	4607      	mov	r7, r0
 8001f32:	db01      	blt.n	8001f38 <_malloc_r+0x1c>
 8001f34:	42a9      	cmp	r1, r5
 8001f36:	d905      	bls.n	8001f44 <_malloc_r+0x28>
 8001f38:	230c      	movs	r3, #12
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	2600      	movs	r6, #0
 8001f3e:	4630      	mov	r0, r6
 8001f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002018 <_malloc_r+0xfc>
 8001f48:	f000 f868 	bl	800201c <__malloc_lock>
 8001f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f50:	461c      	mov	r4, r3
 8001f52:	bb5c      	cbnz	r4, 8001fac <_malloc_r+0x90>
 8001f54:	4629      	mov	r1, r5
 8001f56:	4638      	mov	r0, r7
 8001f58:	f7ff ffc0 	bl	8001edc <sbrk_aligned>
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	4604      	mov	r4, r0
 8001f60:	d155      	bne.n	800200e <_malloc_r+0xf2>
 8001f62:	f8d8 4000 	ldr.w	r4, [r8]
 8001f66:	4626      	mov	r6, r4
 8001f68:	2e00      	cmp	r6, #0
 8001f6a:	d145      	bne.n	8001ff8 <_malloc_r+0xdc>
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	d048      	beq.n	8002002 <_malloc_r+0xe6>
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	4631      	mov	r1, r6
 8001f74:	4638      	mov	r0, r7
 8001f76:	eb04 0903 	add.w	r9, r4, r3
 8001f7a:	f000 f897 	bl	80020ac <_sbrk_r>
 8001f7e:	4581      	cmp	r9, r0
 8001f80:	d13f      	bne.n	8002002 <_malloc_r+0xe6>
 8001f82:	6821      	ldr	r1, [r4, #0]
 8001f84:	1a6d      	subs	r5, r5, r1
 8001f86:	4629      	mov	r1, r5
 8001f88:	4638      	mov	r0, r7
 8001f8a:	f7ff ffa7 	bl	8001edc <sbrk_aligned>
 8001f8e:	3001      	adds	r0, #1
 8001f90:	d037      	beq.n	8002002 <_malloc_r+0xe6>
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	442b      	add	r3, r5
 8001f96:	6023      	str	r3, [r4, #0]
 8001f98:	f8d8 3000 	ldr.w	r3, [r8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d038      	beq.n	8002012 <_malloc_r+0xf6>
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	42a2      	cmp	r2, r4
 8001fa4:	d12b      	bne.n	8001ffe <_malloc_r+0xe2>
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	e00f      	b.n	8001fcc <_malloc_r+0xb0>
 8001fac:	6822      	ldr	r2, [r4, #0]
 8001fae:	1b52      	subs	r2, r2, r5
 8001fb0:	d41f      	bmi.n	8001ff2 <_malloc_r+0xd6>
 8001fb2:	2a0b      	cmp	r2, #11
 8001fb4:	d917      	bls.n	8001fe6 <_malloc_r+0xca>
 8001fb6:	1961      	adds	r1, r4, r5
 8001fb8:	42a3      	cmp	r3, r4
 8001fba:	6025      	str	r5, [r4, #0]
 8001fbc:	bf18      	it	ne
 8001fbe:	6059      	strne	r1, [r3, #4]
 8001fc0:	6863      	ldr	r3, [r4, #4]
 8001fc2:	bf08      	it	eq
 8001fc4:	f8c8 1000 	streq.w	r1, [r8]
 8001fc8:	5162      	str	r2, [r4, r5]
 8001fca:	604b      	str	r3, [r1, #4]
 8001fcc:	4638      	mov	r0, r7
 8001fce:	f104 060b 	add.w	r6, r4, #11
 8001fd2:	f000 f829 	bl	8002028 <__malloc_unlock>
 8001fd6:	f026 0607 	bic.w	r6, r6, #7
 8001fda:	1d23      	adds	r3, r4, #4
 8001fdc:	1af2      	subs	r2, r6, r3
 8001fde:	d0ae      	beq.n	8001f3e <_malloc_r+0x22>
 8001fe0:	1b9b      	subs	r3, r3, r6
 8001fe2:	50a3      	str	r3, [r4, r2]
 8001fe4:	e7ab      	b.n	8001f3e <_malloc_r+0x22>
 8001fe6:	42a3      	cmp	r3, r4
 8001fe8:	6862      	ldr	r2, [r4, #4]
 8001fea:	d1dd      	bne.n	8001fa8 <_malloc_r+0x8c>
 8001fec:	f8c8 2000 	str.w	r2, [r8]
 8001ff0:	e7ec      	b.n	8001fcc <_malloc_r+0xb0>
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	6864      	ldr	r4, [r4, #4]
 8001ff6:	e7ac      	b.n	8001f52 <_malloc_r+0x36>
 8001ff8:	4634      	mov	r4, r6
 8001ffa:	6876      	ldr	r6, [r6, #4]
 8001ffc:	e7b4      	b.n	8001f68 <_malloc_r+0x4c>
 8001ffe:	4613      	mov	r3, r2
 8002000:	e7cc      	b.n	8001f9c <_malloc_r+0x80>
 8002002:	230c      	movs	r3, #12
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4638      	mov	r0, r7
 8002008:	f000 f80e 	bl	8002028 <__malloc_unlock>
 800200c:	e797      	b.n	8001f3e <_malloc_r+0x22>
 800200e:	6025      	str	r5, [r4, #0]
 8002010:	e7dc      	b.n	8001fcc <_malloc_r+0xb0>
 8002012:	605b      	str	r3, [r3, #4]
 8002014:	deff      	udf	#255	; 0xff
 8002016:	bf00      	nop
 8002018:	20008450 	.word	0x20008450

0800201c <__malloc_lock>:
 800201c:	4801      	ldr	r0, [pc, #4]	; (8002024 <__malloc_lock+0x8>)
 800201e:	f000 b87f 	b.w	8002120 <__retarget_lock_acquire_recursive>
 8002022:	bf00      	nop
 8002024:	20008594 	.word	0x20008594

08002028 <__malloc_unlock>:
 8002028:	4801      	ldr	r0, [pc, #4]	; (8002030 <__malloc_unlock+0x8>)
 800202a:	f000 b87a 	b.w	8002122 <__retarget_lock_release_recursive>
 800202e:	bf00      	nop
 8002030:	20008594 	.word	0x20008594

08002034 <_vsiprintf_r>:
 8002034:	b500      	push	{lr}
 8002036:	b09b      	sub	sp, #108	; 0x6c
 8002038:	9100      	str	r1, [sp, #0]
 800203a:	9104      	str	r1, [sp, #16]
 800203c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002040:	9105      	str	r1, [sp, #20]
 8002042:	9102      	str	r1, [sp, #8]
 8002044:	4905      	ldr	r1, [pc, #20]	; (800205c <_vsiprintf_r+0x28>)
 8002046:	9103      	str	r1, [sp, #12]
 8002048:	4669      	mov	r1, sp
 800204a:	f000 f911 	bl	8002270 <_svfiprintf_r>
 800204e:	9b00      	ldr	r3, [sp, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	b01b      	add	sp, #108	; 0x6c
 8002056:	f85d fb04 	ldr.w	pc, [sp], #4
 800205a:	bf00      	nop
 800205c:	ffff0208 	.word	0xffff0208

08002060 <vsiprintf>:
 8002060:	4613      	mov	r3, r2
 8002062:	460a      	mov	r2, r1
 8002064:	4601      	mov	r1, r0
 8002066:	4802      	ldr	r0, [pc, #8]	; (8002070 <vsiprintf+0x10>)
 8002068:	6800      	ldr	r0, [r0, #0]
 800206a:	f7ff bfe3 	b.w	8002034 <_vsiprintf_r>
 800206e:	bf00      	nop
 8002070:	20007d20 	.word	0x20007d20

08002074 <memset>:
 8002074:	4402      	add	r2, r0
 8002076:	4603      	mov	r3, r0
 8002078:	4293      	cmp	r3, r2
 800207a:	d100      	bne.n	800207e <memset+0xa>
 800207c:	4770      	bx	lr
 800207e:	f803 1b01 	strb.w	r1, [r3], #1
 8002082:	e7f9      	b.n	8002078 <memset+0x4>

08002084 <strncpy>:
 8002084:	b510      	push	{r4, lr}
 8002086:	3901      	subs	r1, #1
 8002088:	4603      	mov	r3, r0
 800208a:	b132      	cbz	r2, 800209a <strncpy+0x16>
 800208c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002090:	f803 4b01 	strb.w	r4, [r3], #1
 8002094:	3a01      	subs	r2, #1
 8002096:	2c00      	cmp	r4, #0
 8002098:	d1f7      	bne.n	800208a <strncpy+0x6>
 800209a:	441a      	add	r2, r3
 800209c:	2100      	movs	r1, #0
 800209e:	4293      	cmp	r3, r2
 80020a0:	d100      	bne.n	80020a4 <strncpy+0x20>
 80020a2:	bd10      	pop	{r4, pc}
 80020a4:	f803 1b01 	strb.w	r1, [r3], #1
 80020a8:	e7f9      	b.n	800209e <strncpy+0x1a>
	...

080020ac <_sbrk_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4d06      	ldr	r5, [pc, #24]	; (80020c8 <_sbrk_r+0x1c>)
 80020b0:	2300      	movs	r3, #0
 80020b2:	4604      	mov	r4, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	f7ff fa92 	bl	80015e0 <_sbrk>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d102      	bne.n	80020c6 <_sbrk_r+0x1a>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	b103      	cbz	r3, 80020c6 <_sbrk_r+0x1a>
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	20008590 	.word	0x20008590

080020cc <__errno>:
 80020cc:	4b01      	ldr	r3, [pc, #4]	; (80020d4 <__errno+0x8>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20007d20 	.word	0x20007d20

080020d8 <__libc_init_array>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	4d0d      	ldr	r5, [pc, #52]	; (8002110 <__libc_init_array+0x38>)
 80020dc:	4c0d      	ldr	r4, [pc, #52]	; (8002114 <__libc_init_array+0x3c>)
 80020de:	1b64      	subs	r4, r4, r5
 80020e0:	10a4      	asrs	r4, r4, #2
 80020e2:	2600      	movs	r6, #0
 80020e4:	42a6      	cmp	r6, r4
 80020e6:	d109      	bne.n	80020fc <__libc_init_array+0x24>
 80020e8:	4d0b      	ldr	r5, [pc, #44]	; (8002118 <__libc_init_array+0x40>)
 80020ea:	4c0c      	ldr	r4, [pc, #48]	; (800211c <__libc_init_array+0x44>)
 80020ec:	f000 fbae 	bl	800284c <_init>
 80020f0:	1b64      	subs	r4, r4, r5
 80020f2:	10a4      	asrs	r4, r4, #2
 80020f4:	2600      	movs	r6, #0
 80020f6:	42a6      	cmp	r6, r4
 80020f8:	d105      	bne.n	8002106 <__libc_init_array+0x2e>
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002100:	4798      	blx	r3
 8002102:	3601      	adds	r6, #1
 8002104:	e7ee      	b.n	80020e4 <__libc_init_array+0xc>
 8002106:	f855 3b04 	ldr.w	r3, [r5], #4
 800210a:	4798      	blx	r3
 800210c:	3601      	adds	r6, #1
 800210e:	e7f2      	b.n	80020f6 <__libc_init_array+0x1e>
 8002110:	08002a00 	.word	0x08002a00
 8002114:	08002a00 	.word	0x08002a00
 8002118:	08002a00 	.word	0x08002a00
 800211c:	08002a04 	.word	0x08002a04

08002120 <__retarget_lock_acquire_recursive>:
 8002120:	4770      	bx	lr

08002122 <__retarget_lock_release_recursive>:
 8002122:	4770      	bx	lr

08002124 <_free_r>:
 8002124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002126:	2900      	cmp	r1, #0
 8002128:	d044      	beq.n	80021b4 <_free_r+0x90>
 800212a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800212e:	9001      	str	r0, [sp, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f1a1 0404 	sub.w	r4, r1, #4
 8002136:	bfb8      	it	lt
 8002138:	18e4      	addlt	r4, r4, r3
 800213a:	f7ff ff6f 	bl	800201c <__malloc_lock>
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <_free_r+0x94>)
 8002140:	9801      	ldr	r0, [sp, #4]
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	b933      	cbnz	r3, 8002154 <_free_r+0x30>
 8002146:	6063      	str	r3, [r4, #4]
 8002148:	6014      	str	r4, [r2, #0]
 800214a:	b003      	add	sp, #12
 800214c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002150:	f7ff bf6a 	b.w	8002028 <__malloc_unlock>
 8002154:	42a3      	cmp	r3, r4
 8002156:	d908      	bls.n	800216a <_free_r+0x46>
 8002158:	6825      	ldr	r5, [r4, #0]
 800215a:	1961      	adds	r1, r4, r5
 800215c:	428b      	cmp	r3, r1
 800215e:	bf01      	itttt	eq
 8002160:	6819      	ldreq	r1, [r3, #0]
 8002162:	685b      	ldreq	r3, [r3, #4]
 8002164:	1949      	addeq	r1, r1, r5
 8002166:	6021      	streq	r1, [r4, #0]
 8002168:	e7ed      	b.n	8002146 <_free_r+0x22>
 800216a:	461a      	mov	r2, r3
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	b10b      	cbz	r3, 8002174 <_free_r+0x50>
 8002170:	42a3      	cmp	r3, r4
 8002172:	d9fa      	bls.n	800216a <_free_r+0x46>
 8002174:	6811      	ldr	r1, [r2, #0]
 8002176:	1855      	adds	r5, r2, r1
 8002178:	42a5      	cmp	r5, r4
 800217a:	d10b      	bne.n	8002194 <_free_r+0x70>
 800217c:	6824      	ldr	r4, [r4, #0]
 800217e:	4421      	add	r1, r4
 8002180:	1854      	adds	r4, r2, r1
 8002182:	42a3      	cmp	r3, r4
 8002184:	6011      	str	r1, [r2, #0]
 8002186:	d1e0      	bne.n	800214a <_free_r+0x26>
 8002188:	681c      	ldr	r4, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	6053      	str	r3, [r2, #4]
 800218e:	440c      	add	r4, r1
 8002190:	6014      	str	r4, [r2, #0]
 8002192:	e7da      	b.n	800214a <_free_r+0x26>
 8002194:	d902      	bls.n	800219c <_free_r+0x78>
 8002196:	230c      	movs	r3, #12
 8002198:	6003      	str	r3, [r0, #0]
 800219a:	e7d6      	b.n	800214a <_free_r+0x26>
 800219c:	6825      	ldr	r5, [r4, #0]
 800219e:	1961      	adds	r1, r4, r5
 80021a0:	428b      	cmp	r3, r1
 80021a2:	bf04      	itt	eq
 80021a4:	6819      	ldreq	r1, [r3, #0]
 80021a6:	685b      	ldreq	r3, [r3, #4]
 80021a8:	6063      	str	r3, [r4, #4]
 80021aa:	bf04      	itt	eq
 80021ac:	1949      	addeq	r1, r1, r5
 80021ae:	6021      	streq	r1, [r4, #0]
 80021b0:	6054      	str	r4, [r2, #4]
 80021b2:	e7ca      	b.n	800214a <_free_r+0x26>
 80021b4:	b003      	add	sp, #12
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	20008450 	.word	0x20008450

080021bc <__ssputs_r>:
 80021bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c0:	688e      	ldr	r6, [r1, #8]
 80021c2:	461f      	mov	r7, r3
 80021c4:	42be      	cmp	r6, r7
 80021c6:	680b      	ldr	r3, [r1, #0]
 80021c8:	4682      	mov	sl, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4690      	mov	r8, r2
 80021ce:	d82c      	bhi.n	800222a <__ssputs_r+0x6e>
 80021d0:	898a      	ldrh	r2, [r1, #12]
 80021d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80021d6:	d026      	beq.n	8002226 <__ssputs_r+0x6a>
 80021d8:	6965      	ldr	r5, [r4, #20]
 80021da:	6909      	ldr	r1, [r1, #16]
 80021dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021e0:	eba3 0901 	sub.w	r9, r3, r1
 80021e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80021e8:	1c7b      	adds	r3, r7, #1
 80021ea:	444b      	add	r3, r9
 80021ec:	106d      	asrs	r5, r5, #1
 80021ee:	429d      	cmp	r5, r3
 80021f0:	bf38      	it	cc
 80021f2:	461d      	movcc	r5, r3
 80021f4:	0553      	lsls	r3, r2, #21
 80021f6:	d527      	bpl.n	8002248 <__ssputs_r+0x8c>
 80021f8:	4629      	mov	r1, r5
 80021fa:	f7ff fe8f 	bl	8001f1c <_malloc_r>
 80021fe:	4606      	mov	r6, r0
 8002200:	b360      	cbz	r0, 800225c <__ssputs_r+0xa0>
 8002202:	6921      	ldr	r1, [r4, #16]
 8002204:	464a      	mov	r2, r9
 8002206:	f000 fadb 	bl	80027c0 <memcpy>
 800220a:	89a3      	ldrh	r3, [r4, #12]
 800220c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	6126      	str	r6, [r4, #16]
 8002218:	6165      	str	r5, [r4, #20]
 800221a:	444e      	add	r6, r9
 800221c:	eba5 0509 	sub.w	r5, r5, r9
 8002220:	6026      	str	r6, [r4, #0]
 8002222:	60a5      	str	r5, [r4, #8]
 8002224:	463e      	mov	r6, r7
 8002226:	42be      	cmp	r6, r7
 8002228:	d900      	bls.n	800222c <__ssputs_r+0x70>
 800222a:	463e      	mov	r6, r7
 800222c:	6820      	ldr	r0, [r4, #0]
 800222e:	4632      	mov	r2, r6
 8002230:	4641      	mov	r1, r8
 8002232:	f000 faab 	bl	800278c <memmove>
 8002236:	68a3      	ldr	r3, [r4, #8]
 8002238:	1b9b      	subs	r3, r3, r6
 800223a:	60a3      	str	r3, [r4, #8]
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	4433      	add	r3, r6
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	2000      	movs	r0, #0
 8002244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002248:	462a      	mov	r2, r5
 800224a:	f000 fac7 	bl	80027dc <_realloc_r>
 800224e:	4606      	mov	r6, r0
 8002250:	2800      	cmp	r0, #0
 8002252:	d1e0      	bne.n	8002216 <__ssputs_r+0x5a>
 8002254:	6921      	ldr	r1, [r4, #16]
 8002256:	4650      	mov	r0, sl
 8002258:	f7ff ff64 	bl	8002124 <_free_r>
 800225c:	230c      	movs	r3, #12
 800225e:	f8ca 3000 	str.w	r3, [sl]
 8002262:	89a3      	ldrh	r3, [r4, #12]
 8002264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002268:	81a3      	strh	r3, [r4, #12]
 800226a:	f04f 30ff 	mov.w	r0, #4294967295
 800226e:	e7e9      	b.n	8002244 <__ssputs_r+0x88>

08002270 <_svfiprintf_r>:
 8002270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002274:	4698      	mov	r8, r3
 8002276:	898b      	ldrh	r3, [r1, #12]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	b09d      	sub	sp, #116	; 0x74
 800227c:	4607      	mov	r7, r0
 800227e:	460d      	mov	r5, r1
 8002280:	4614      	mov	r4, r2
 8002282:	d50e      	bpl.n	80022a2 <_svfiprintf_r+0x32>
 8002284:	690b      	ldr	r3, [r1, #16]
 8002286:	b963      	cbnz	r3, 80022a2 <_svfiprintf_r+0x32>
 8002288:	2140      	movs	r1, #64	; 0x40
 800228a:	f7ff fe47 	bl	8001f1c <_malloc_r>
 800228e:	6028      	str	r0, [r5, #0]
 8002290:	6128      	str	r0, [r5, #16]
 8002292:	b920      	cbnz	r0, 800229e <_svfiprintf_r+0x2e>
 8002294:	230c      	movs	r3, #12
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	e0d0      	b.n	8002440 <_svfiprintf_r+0x1d0>
 800229e:	2340      	movs	r3, #64	; 0x40
 80022a0:	616b      	str	r3, [r5, #20]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9309      	str	r3, [sp, #36]	; 0x24
 80022a6:	2320      	movs	r3, #32
 80022a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80022b0:	2330      	movs	r3, #48	; 0x30
 80022b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002458 <_svfiprintf_r+0x1e8>
 80022b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022ba:	f04f 0901 	mov.w	r9, #1
 80022be:	4623      	mov	r3, r4
 80022c0:	469a      	mov	sl, r3
 80022c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022c6:	b10a      	cbz	r2, 80022cc <_svfiprintf_r+0x5c>
 80022c8:	2a25      	cmp	r2, #37	; 0x25
 80022ca:	d1f9      	bne.n	80022c0 <_svfiprintf_r+0x50>
 80022cc:	ebba 0b04 	subs.w	fp, sl, r4
 80022d0:	d00b      	beq.n	80022ea <_svfiprintf_r+0x7a>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4622      	mov	r2, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	4638      	mov	r0, r7
 80022da:	f7ff ff6f 	bl	80021bc <__ssputs_r>
 80022de:	3001      	adds	r0, #1
 80022e0:	f000 80a9 	beq.w	8002436 <_svfiprintf_r+0x1c6>
 80022e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022e6:	445a      	add	r2, fp
 80022e8:	9209      	str	r2, [sp, #36]	; 0x24
 80022ea:	f89a 3000 	ldrb.w	r3, [sl]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80a1 	beq.w	8002436 <_svfiprintf_r+0x1c6>
 80022f4:	2300      	movs	r3, #0
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022fe:	f10a 0a01 	add.w	sl, sl, #1
 8002302:	9304      	str	r3, [sp, #16]
 8002304:	9307      	str	r3, [sp, #28]
 8002306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800230a:	931a      	str	r3, [sp, #104]	; 0x68
 800230c:	4654      	mov	r4, sl
 800230e:	2205      	movs	r2, #5
 8002310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002314:	4850      	ldr	r0, [pc, #320]	; (8002458 <_svfiprintf_r+0x1e8>)
 8002316:	f7fd ff6b 	bl	80001f0 <memchr>
 800231a:	9a04      	ldr	r2, [sp, #16]
 800231c:	b9d8      	cbnz	r0, 8002356 <_svfiprintf_r+0xe6>
 800231e:	06d0      	lsls	r0, r2, #27
 8002320:	bf44      	itt	mi
 8002322:	2320      	movmi	r3, #32
 8002324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002328:	0711      	lsls	r1, r2, #28
 800232a:	bf44      	itt	mi
 800232c:	232b      	movmi	r3, #43	; 0x2b
 800232e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002332:	f89a 3000 	ldrb.w	r3, [sl]
 8002336:	2b2a      	cmp	r3, #42	; 0x2a
 8002338:	d015      	beq.n	8002366 <_svfiprintf_r+0xf6>
 800233a:	9a07      	ldr	r2, [sp, #28]
 800233c:	4654      	mov	r4, sl
 800233e:	2000      	movs	r0, #0
 8002340:	f04f 0c0a 	mov.w	ip, #10
 8002344:	4621      	mov	r1, r4
 8002346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800234a:	3b30      	subs	r3, #48	; 0x30
 800234c:	2b09      	cmp	r3, #9
 800234e:	d94d      	bls.n	80023ec <_svfiprintf_r+0x17c>
 8002350:	b1b0      	cbz	r0, 8002380 <_svfiprintf_r+0x110>
 8002352:	9207      	str	r2, [sp, #28]
 8002354:	e014      	b.n	8002380 <_svfiprintf_r+0x110>
 8002356:	eba0 0308 	sub.w	r3, r0, r8
 800235a:	fa09 f303 	lsl.w	r3, r9, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	9304      	str	r3, [sp, #16]
 8002362:	46a2      	mov	sl, r4
 8002364:	e7d2      	b.n	800230c <_svfiprintf_r+0x9c>
 8002366:	9b03      	ldr	r3, [sp, #12]
 8002368:	1d19      	adds	r1, r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	9103      	str	r1, [sp, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	bfbb      	ittet	lt
 8002372:	425b      	neglt	r3, r3
 8002374:	f042 0202 	orrlt.w	r2, r2, #2
 8002378:	9307      	strge	r3, [sp, #28]
 800237a:	9307      	strlt	r3, [sp, #28]
 800237c:	bfb8      	it	lt
 800237e:	9204      	strlt	r2, [sp, #16]
 8002380:	7823      	ldrb	r3, [r4, #0]
 8002382:	2b2e      	cmp	r3, #46	; 0x2e
 8002384:	d10c      	bne.n	80023a0 <_svfiprintf_r+0x130>
 8002386:	7863      	ldrb	r3, [r4, #1]
 8002388:	2b2a      	cmp	r3, #42	; 0x2a
 800238a:	d134      	bne.n	80023f6 <_svfiprintf_r+0x186>
 800238c:	9b03      	ldr	r3, [sp, #12]
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	9203      	str	r2, [sp, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	bfb8      	it	lt
 8002398:	f04f 33ff 	movlt.w	r3, #4294967295
 800239c:	3402      	adds	r4, #2
 800239e:	9305      	str	r3, [sp, #20]
 80023a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002468 <_svfiprintf_r+0x1f8>
 80023a4:	7821      	ldrb	r1, [r4, #0]
 80023a6:	2203      	movs	r2, #3
 80023a8:	4650      	mov	r0, sl
 80023aa:	f7fd ff21 	bl	80001f0 <memchr>
 80023ae:	b138      	cbz	r0, 80023c0 <_svfiprintf_r+0x150>
 80023b0:	9b04      	ldr	r3, [sp, #16]
 80023b2:	eba0 000a 	sub.w	r0, r0, sl
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	4082      	lsls	r2, r0
 80023ba:	4313      	orrs	r3, r2
 80023bc:	3401      	adds	r4, #1
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023c4:	4825      	ldr	r0, [pc, #148]	; (800245c <_svfiprintf_r+0x1ec>)
 80023c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023ca:	2206      	movs	r2, #6
 80023cc:	f7fd ff10 	bl	80001f0 <memchr>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d038      	beq.n	8002446 <_svfiprintf_r+0x1d6>
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <_svfiprintf_r+0x1f0>)
 80023d6:	bb1b      	cbnz	r3, 8002420 <_svfiprintf_r+0x1b0>
 80023d8:	9b03      	ldr	r3, [sp, #12]
 80023da:	3307      	adds	r3, #7
 80023dc:	f023 0307 	bic.w	r3, r3, #7
 80023e0:	3308      	adds	r3, #8
 80023e2:	9303      	str	r3, [sp, #12]
 80023e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023e6:	4433      	add	r3, r6
 80023e8:	9309      	str	r3, [sp, #36]	; 0x24
 80023ea:	e768      	b.n	80022be <_svfiprintf_r+0x4e>
 80023ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80023f0:	460c      	mov	r4, r1
 80023f2:	2001      	movs	r0, #1
 80023f4:	e7a6      	b.n	8002344 <_svfiprintf_r+0xd4>
 80023f6:	2300      	movs	r3, #0
 80023f8:	3401      	adds	r4, #1
 80023fa:	9305      	str	r3, [sp, #20]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f04f 0c0a 	mov.w	ip, #10
 8002402:	4620      	mov	r0, r4
 8002404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002408:	3a30      	subs	r2, #48	; 0x30
 800240a:	2a09      	cmp	r2, #9
 800240c:	d903      	bls.n	8002416 <_svfiprintf_r+0x1a6>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0c6      	beq.n	80023a0 <_svfiprintf_r+0x130>
 8002412:	9105      	str	r1, [sp, #20]
 8002414:	e7c4      	b.n	80023a0 <_svfiprintf_r+0x130>
 8002416:	fb0c 2101 	mla	r1, ip, r1, r2
 800241a:	4604      	mov	r4, r0
 800241c:	2301      	movs	r3, #1
 800241e:	e7f0      	b.n	8002402 <_svfiprintf_r+0x192>
 8002420:	ab03      	add	r3, sp, #12
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	462a      	mov	r2, r5
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <_svfiprintf_r+0x1f4>)
 8002428:	a904      	add	r1, sp, #16
 800242a:	4638      	mov	r0, r7
 800242c:	f3af 8000 	nop.w
 8002430:	1c42      	adds	r2, r0, #1
 8002432:	4606      	mov	r6, r0
 8002434:	d1d6      	bne.n	80023e4 <_svfiprintf_r+0x174>
 8002436:	89ab      	ldrh	r3, [r5, #12]
 8002438:	065b      	lsls	r3, r3, #25
 800243a:	f53f af2d 	bmi.w	8002298 <_svfiprintf_r+0x28>
 800243e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002440:	b01d      	add	sp, #116	; 0x74
 8002442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002446:	ab03      	add	r3, sp, #12
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	462a      	mov	r2, r5
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <_svfiprintf_r+0x1f4>)
 800244e:	a904      	add	r1, sp, #16
 8002450:	4638      	mov	r0, r7
 8002452:	f000 f879 	bl	8002548 <_printf_i>
 8002456:	e7eb      	b.n	8002430 <_svfiprintf_r+0x1c0>
 8002458:	080029cd 	.word	0x080029cd
 800245c:	080029d7 	.word	0x080029d7
 8002460:	00000000 	.word	0x00000000
 8002464:	080021bd 	.word	0x080021bd
 8002468:	080029d3 	.word	0x080029d3

0800246c <_printf_common>:
 800246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002470:	4616      	mov	r6, r2
 8002472:	4699      	mov	r9, r3
 8002474:	688a      	ldr	r2, [r1, #8]
 8002476:	690b      	ldr	r3, [r1, #16]
 8002478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800247c:	4293      	cmp	r3, r2
 800247e:	bfb8      	it	lt
 8002480:	4613      	movlt	r3, r2
 8002482:	6033      	str	r3, [r6, #0]
 8002484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002488:	4607      	mov	r7, r0
 800248a:	460c      	mov	r4, r1
 800248c:	b10a      	cbz	r2, 8002492 <_printf_common+0x26>
 800248e:	3301      	adds	r3, #1
 8002490:	6033      	str	r3, [r6, #0]
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	0699      	lsls	r1, r3, #26
 8002496:	bf42      	ittt	mi
 8002498:	6833      	ldrmi	r3, [r6, #0]
 800249a:	3302      	addmi	r3, #2
 800249c:	6033      	strmi	r3, [r6, #0]
 800249e:	6825      	ldr	r5, [r4, #0]
 80024a0:	f015 0506 	ands.w	r5, r5, #6
 80024a4:	d106      	bne.n	80024b4 <_printf_common+0x48>
 80024a6:	f104 0a19 	add.w	sl, r4, #25
 80024aa:	68e3      	ldr	r3, [r4, #12]
 80024ac:	6832      	ldr	r2, [r6, #0]
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	42ab      	cmp	r3, r5
 80024b2:	dc26      	bgt.n	8002502 <_printf_common+0x96>
 80024b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024b8:	1e13      	subs	r3, r2, #0
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	bf18      	it	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	0692      	lsls	r2, r2, #26
 80024c2:	d42b      	bmi.n	800251c <_printf_common+0xb0>
 80024c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024c8:	4649      	mov	r1, r9
 80024ca:	4638      	mov	r0, r7
 80024cc:	47c0      	blx	r8
 80024ce:	3001      	adds	r0, #1
 80024d0:	d01e      	beq.n	8002510 <_printf_common+0xa4>
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	6922      	ldr	r2, [r4, #16]
 80024d6:	f003 0306 	and.w	r3, r3, #6
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf02      	ittt	eq
 80024de:	68e5      	ldreq	r5, [r4, #12]
 80024e0:	6833      	ldreq	r3, [r6, #0]
 80024e2:	1aed      	subeq	r5, r5, r3
 80024e4:	68a3      	ldr	r3, [r4, #8]
 80024e6:	bf0c      	ite	eq
 80024e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024ec:	2500      	movne	r5, #0
 80024ee:	4293      	cmp	r3, r2
 80024f0:	bfc4      	itt	gt
 80024f2:	1a9b      	subgt	r3, r3, r2
 80024f4:	18ed      	addgt	r5, r5, r3
 80024f6:	2600      	movs	r6, #0
 80024f8:	341a      	adds	r4, #26
 80024fa:	42b5      	cmp	r5, r6
 80024fc:	d11a      	bne.n	8002534 <_printf_common+0xc8>
 80024fe:	2000      	movs	r0, #0
 8002500:	e008      	b.n	8002514 <_printf_common+0xa8>
 8002502:	2301      	movs	r3, #1
 8002504:	4652      	mov	r2, sl
 8002506:	4649      	mov	r1, r9
 8002508:	4638      	mov	r0, r7
 800250a:	47c0      	blx	r8
 800250c:	3001      	adds	r0, #1
 800250e:	d103      	bne.n	8002518 <_printf_common+0xac>
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002518:	3501      	adds	r5, #1
 800251a:	e7c6      	b.n	80024aa <_printf_common+0x3e>
 800251c:	18e1      	adds	r1, r4, r3
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	2030      	movs	r0, #48	; 0x30
 8002522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002526:	4422      	add	r2, r4
 8002528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800252c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002530:	3302      	adds	r3, #2
 8002532:	e7c7      	b.n	80024c4 <_printf_common+0x58>
 8002534:	2301      	movs	r3, #1
 8002536:	4622      	mov	r2, r4
 8002538:	4649      	mov	r1, r9
 800253a:	4638      	mov	r0, r7
 800253c:	47c0      	blx	r8
 800253e:	3001      	adds	r0, #1
 8002540:	d0e6      	beq.n	8002510 <_printf_common+0xa4>
 8002542:	3601      	adds	r6, #1
 8002544:	e7d9      	b.n	80024fa <_printf_common+0x8e>
	...

08002548 <_printf_i>:
 8002548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800254c:	7e0f      	ldrb	r7, [r1, #24]
 800254e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002550:	2f78      	cmp	r7, #120	; 0x78
 8002552:	4691      	mov	r9, r2
 8002554:	4680      	mov	r8, r0
 8002556:	460c      	mov	r4, r1
 8002558:	469a      	mov	sl, r3
 800255a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800255e:	d807      	bhi.n	8002570 <_printf_i+0x28>
 8002560:	2f62      	cmp	r7, #98	; 0x62
 8002562:	d80a      	bhi.n	800257a <_printf_i+0x32>
 8002564:	2f00      	cmp	r7, #0
 8002566:	f000 80d4 	beq.w	8002712 <_printf_i+0x1ca>
 800256a:	2f58      	cmp	r7, #88	; 0x58
 800256c:	f000 80c0 	beq.w	80026f0 <_printf_i+0x1a8>
 8002570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002578:	e03a      	b.n	80025f0 <_printf_i+0xa8>
 800257a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800257e:	2b15      	cmp	r3, #21
 8002580:	d8f6      	bhi.n	8002570 <_printf_i+0x28>
 8002582:	a101      	add	r1, pc, #4	; (adr r1, 8002588 <_printf_i+0x40>)
 8002584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002588:	080025e1 	.word	0x080025e1
 800258c:	080025f5 	.word	0x080025f5
 8002590:	08002571 	.word	0x08002571
 8002594:	08002571 	.word	0x08002571
 8002598:	08002571 	.word	0x08002571
 800259c:	08002571 	.word	0x08002571
 80025a0:	080025f5 	.word	0x080025f5
 80025a4:	08002571 	.word	0x08002571
 80025a8:	08002571 	.word	0x08002571
 80025ac:	08002571 	.word	0x08002571
 80025b0:	08002571 	.word	0x08002571
 80025b4:	080026f9 	.word	0x080026f9
 80025b8:	08002621 	.word	0x08002621
 80025bc:	080026b3 	.word	0x080026b3
 80025c0:	08002571 	.word	0x08002571
 80025c4:	08002571 	.word	0x08002571
 80025c8:	0800271b 	.word	0x0800271b
 80025cc:	08002571 	.word	0x08002571
 80025d0:	08002621 	.word	0x08002621
 80025d4:	08002571 	.word	0x08002571
 80025d8:	08002571 	.word	0x08002571
 80025dc:	080026bb 	.word	0x080026bb
 80025e0:	682b      	ldr	r3, [r5, #0]
 80025e2:	1d1a      	adds	r2, r3, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	602a      	str	r2, [r5, #0]
 80025e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025f0:	2301      	movs	r3, #1
 80025f2:	e09f      	b.n	8002734 <_printf_i+0x1ec>
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	0607      	lsls	r7, r0, #24
 80025fa:	f103 0104 	add.w	r1, r3, #4
 80025fe:	6029      	str	r1, [r5, #0]
 8002600:	d501      	bpl.n	8002606 <_printf_i+0xbe>
 8002602:	681e      	ldr	r6, [r3, #0]
 8002604:	e003      	b.n	800260e <_printf_i+0xc6>
 8002606:	0646      	lsls	r6, r0, #25
 8002608:	d5fb      	bpl.n	8002602 <_printf_i+0xba>
 800260a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800260e:	2e00      	cmp	r6, #0
 8002610:	da03      	bge.n	800261a <_printf_i+0xd2>
 8002612:	232d      	movs	r3, #45	; 0x2d
 8002614:	4276      	negs	r6, r6
 8002616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800261a:	485a      	ldr	r0, [pc, #360]	; (8002784 <_printf_i+0x23c>)
 800261c:	230a      	movs	r3, #10
 800261e:	e012      	b.n	8002646 <_printf_i+0xfe>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	6820      	ldr	r0, [r4, #0]
 8002624:	1d19      	adds	r1, r3, #4
 8002626:	6029      	str	r1, [r5, #0]
 8002628:	0605      	lsls	r5, r0, #24
 800262a:	d501      	bpl.n	8002630 <_printf_i+0xe8>
 800262c:	681e      	ldr	r6, [r3, #0]
 800262e:	e002      	b.n	8002636 <_printf_i+0xee>
 8002630:	0641      	lsls	r1, r0, #25
 8002632:	d5fb      	bpl.n	800262c <_printf_i+0xe4>
 8002634:	881e      	ldrh	r6, [r3, #0]
 8002636:	4853      	ldr	r0, [pc, #332]	; (8002784 <_printf_i+0x23c>)
 8002638:	2f6f      	cmp	r7, #111	; 0x6f
 800263a:	bf0c      	ite	eq
 800263c:	2308      	moveq	r3, #8
 800263e:	230a      	movne	r3, #10
 8002640:	2100      	movs	r1, #0
 8002642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002646:	6865      	ldr	r5, [r4, #4]
 8002648:	60a5      	str	r5, [r4, #8]
 800264a:	2d00      	cmp	r5, #0
 800264c:	bfa2      	ittt	ge
 800264e:	6821      	ldrge	r1, [r4, #0]
 8002650:	f021 0104 	bicge.w	r1, r1, #4
 8002654:	6021      	strge	r1, [r4, #0]
 8002656:	b90e      	cbnz	r6, 800265c <_printf_i+0x114>
 8002658:	2d00      	cmp	r5, #0
 800265a:	d04b      	beq.n	80026f4 <_printf_i+0x1ac>
 800265c:	4615      	mov	r5, r2
 800265e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002662:	fb03 6711 	mls	r7, r3, r1, r6
 8002666:	5dc7      	ldrb	r7, [r0, r7]
 8002668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800266c:	4637      	mov	r7, r6
 800266e:	42bb      	cmp	r3, r7
 8002670:	460e      	mov	r6, r1
 8002672:	d9f4      	bls.n	800265e <_printf_i+0x116>
 8002674:	2b08      	cmp	r3, #8
 8002676:	d10b      	bne.n	8002690 <_printf_i+0x148>
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	07de      	lsls	r6, r3, #31
 800267c:	d508      	bpl.n	8002690 <_printf_i+0x148>
 800267e:	6923      	ldr	r3, [r4, #16]
 8002680:	6861      	ldr	r1, [r4, #4]
 8002682:	4299      	cmp	r1, r3
 8002684:	bfde      	ittt	le
 8002686:	2330      	movle	r3, #48	; 0x30
 8002688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800268c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002690:	1b52      	subs	r2, r2, r5
 8002692:	6122      	str	r2, [r4, #16]
 8002694:	f8cd a000 	str.w	sl, [sp]
 8002698:	464b      	mov	r3, r9
 800269a:	aa03      	add	r2, sp, #12
 800269c:	4621      	mov	r1, r4
 800269e:	4640      	mov	r0, r8
 80026a0:	f7ff fee4 	bl	800246c <_printf_common>
 80026a4:	3001      	adds	r0, #1
 80026a6:	d14a      	bne.n	800273e <_printf_i+0x1f6>
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	b004      	add	sp, #16
 80026ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f043 0320 	orr.w	r3, r3, #32
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	4833      	ldr	r0, [pc, #204]	; (8002788 <_printf_i+0x240>)
 80026bc:	2778      	movs	r7, #120	; 0x78
 80026be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	6829      	ldr	r1, [r5, #0]
 80026c6:	061f      	lsls	r7, r3, #24
 80026c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80026cc:	d402      	bmi.n	80026d4 <_printf_i+0x18c>
 80026ce:	065f      	lsls	r7, r3, #25
 80026d0:	bf48      	it	mi
 80026d2:	b2b6      	uxthmi	r6, r6
 80026d4:	07df      	lsls	r7, r3, #31
 80026d6:	bf48      	it	mi
 80026d8:	f043 0320 	orrmi.w	r3, r3, #32
 80026dc:	6029      	str	r1, [r5, #0]
 80026de:	bf48      	it	mi
 80026e0:	6023      	strmi	r3, [r4, #0]
 80026e2:	b91e      	cbnz	r6, 80026ec <_printf_i+0x1a4>
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	f023 0320 	bic.w	r3, r3, #32
 80026ea:	6023      	str	r3, [r4, #0]
 80026ec:	2310      	movs	r3, #16
 80026ee:	e7a7      	b.n	8002640 <_printf_i+0xf8>
 80026f0:	4824      	ldr	r0, [pc, #144]	; (8002784 <_printf_i+0x23c>)
 80026f2:	e7e4      	b.n	80026be <_printf_i+0x176>
 80026f4:	4615      	mov	r5, r2
 80026f6:	e7bd      	b.n	8002674 <_printf_i+0x12c>
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	6826      	ldr	r6, [r4, #0]
 80026fc:	6961      	ldr	r1, [r4, #20]
 80026fe:	1d18      	adds	r0, r3, #4
 8002700:	6028      	str	r0, [r5, #0]
 8002702:	0635      	lsls	r5, r6, #24
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	d501      	bpl.n	800270c <_printf_i+0x1c4>
 8002708:	6019      	str	r1, [r3, #0]
 800270a:	e002      	b.n	8002712 <_printf_i+0x1ca>
 800270c:	0670      	lsls	r0, r6, #25
 800270e:	d5fb      	bpl.n	8002708 <_printf_i+0x1c0>
 8002710:	8019      	strh	r1, [r3, #0]
 8002712:	2300      	movs	r3, #0
 8002714:	6123      	str	r3, [r4, #16]
 8002716:	4615      	mov	r5, r2
 8002718:	e7bc      	b.n	8002694 <_printf_i+0x14c>
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	1d1a      	adds	r2, r3, #4
 800271e:	602a      	str	r2, [r5, #0]
 8002720:	681d      	ldr	r5, [r3, #0]
 8002722:	6862      	ldr	r2, [r4, #4]
 8002724:	2100      	movs	r1, #0
 8002726:	4628      	mov	r0, r5
 8002728:	f7fd fd62 	bl	80001f0 <memchr>
 800272c:	b108      	cbz	r0, 8002732 <_printf_i+0x1ea>
 800272e:	1b40      	subs	r0, r0, r5
 8002730:	6060      	str	r0, [r4, #4]
 8002732:	6863      	ldr	r3, [r4, #4]
 8002734:	6123      	str	r3, [r4, #16]
 8002736:	2300      	movs	r3, #0
 8002738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800273c:	e7aa      	b.n	8002694 <_printf_i+0x14c>
 800273e:	6923      	ldr	r3, [r4, #16]
 8002740:	462a      	mov	r2, r5
 8002742:	4649      	mov	r1, r9
 8002744:	4640      	mov	r0, r8
 8002746:	47d0      	blx	sl
 8002748:	3001      	adds	r0, #1
 800274a:	d0ad      	beq.n	80026a8 <_printf_i+0x160>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	079b      	lsls	r3, r3, #30
 8002750:	d413      	bmi.n	800277a <_printf_i+0x232>
 8002752:	68e0      	ldr	r0, [r4, #12]
 8002754:	9b03      	ldr	r3, [sp, #12]
 8002756:	4298      	cmp	r0, r3
 8002758:	bfb8      	it	lt
 800275a:	4618      	movlt	r0, r3
 800275c:	e7a6      	b.n	80026ac <_printf_i+0x164>
 800275e:	2301      	movs	r3, #1
 8002760:	4632      	mov	r2, r6
 8002762:	4649      	mov	r1, r9
 8002764:	4640      	mov	r0, r8
 8002766:	47d0      	blx	sl
 8002768:	3001      	adds	r0, #1
 800276a:	d09d      	beq.n	80026a8 <_printf_i+0x160>
 800276c:	3501      	adds	r5, #1
 800276e:	68e3      	ldr	r3, [r4, #12]
 8002770:	9903      	ldr	r1, [sp, #12]
 8002772:	1a5b      	subs	r3, r3, r1
 8002774:	42ab      	cmp	r3, r5
 8002776:	dcf2      	bgt.n	800275e <_printf_i+0x216>
 8002778:	e7eb      	b.n	8002752 <_printf_i+0x20a>
 800277a:	2500      	movs	r5, #0
 800277c:	f104 0619 	add.w	r6, r4, #25
 8002780:	e7f5      	b.n	800276e <_printf_i+0x226>
 8002782:	bf00      	nop
 8002784:	080029de 	.word	0x080029de
 8002788:	080029ef 	.word	0x080029ef

0800278c <memmove>:
 800278c:	4288      	cmp	r0, r1
 800278e:	b510      	push	{r4, lr}
 8002790:	eb01 0402 	add.w	r4, r1, r2
 8002794:	d902      	bls.n	800279c <memmove+0x10>
 8002796:	4284      	cmp	r4, r0
 8002798:	4623      	mov	r3, r4
 800279a:	d807      	bhi.n	80027ac <memmove+0x20>
 800279c:	1e43      	subs	r3, r0, #1
 800279e:	42a1      	cmp	r1, r4
 80027a0:	d008      	beq.n	80027b4 <memmove+0x28>
 80027a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027aa:	e7f8      	b.n	800279e <memmove+0x12>
 80027ac:	4402      	add	r2, r0
 80027ae:	4601      	mov	r1, r0
 80027b0:	428a      	cmp	r2, r1
 80027b2:	d100      	bne.n	80027b6 <memmove+0x2a>
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80027ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80027be:	e7f7      	b.n	80027b0 <memmove+0x24>

080027c0 <memcpy>:
 80027c0:	440a      	add	r2, r1
 80027c2:	4291      	cmp	r1, r2
 80027c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80027c8:	d100      	bne.n	80027cc <memcpy+0xc>
 80027ca:	4770      	bx	lr
 80027cc:	b510      	push	{r4, lr}
 80027ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027d6:	4291      	cmp	r1, r2
 80027d8:	d1f9      	bne.n	80027ce <memcpy+0xe>
 80027da:	bd10      	pop	{r4, pc}

080027dc <_realloc_r>:
 80027dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e0:	4680      	mov	r8, r0
 80027e2:	4614      	mov	r4, r2
 80027e4:	460e      	mov	r6, r1
 80027e6:	b921      	cbnz	r1, 80027f2 <_realloc_r+0x16>
 80027e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027ec:	4611      	mov	r1, r2
 80027ee:	f7ff bb95 	b.w	8001f1c <_malloc_r>
 80027f2:	b92a      	cbnz	r2, 8002800 <_realloc_r+0x24>
 80027f4:	f7ff fc96 	bl	8002124 <_free_r>
 80027f8:	4625      	mov	r5, r4
 80027fa:	4628      	mov	r0, r5
 80027fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002800:	f000 f81b 	bl	800283a <_malloc_usable_size_r>
 8002804:	4284      	cmp	r4, r0
 8002806:	4607      	mov	r7, r0
 8002808:	d802      	bhi.n	8002810 <_realloc_r+0x34>
 800280a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800280e:	d812      	bhi.n	8002836 <_realloc_r+0x5a>
 8002810:	4621      	mov	r1, r4
 8002812:	4640      	mov	r0, r8
 8002814:	f7ff fb82 	bl	8001f1c <_malloc_r>
 8002818:	4605      	mov	r5, r0
 800281a:	2800      	cmp	r0, #0
 800281c:	d0ed      	beq.n	80027fa <_realloc_r+0x1e>
 800281e:	42bc      	cmp	r4, r7
 8002820:	4622      	mov	r2, r4
 8002822:	4631      	mov	r1, r6
 8002824:	bf28      	it	cs
 8002826:	463a      	movcs	r2, r7
 8002828:	f7ff ffca 	bl	80027c0 <memcpy>
 800282c:	4631      	mov	r1, r6
 800282e:	4640      	mov	r0, r8
 8002830:	f7ff fc78 	bl	8002124 <_free_r>
 8002834:	e7e1      	b.n	80027fa <_realloc_r+0x1e>
 8002836:	4635      	mov	r5, r6
 8002838:	e7df      	b.n	80027fa <_realloc_r+0x1e>

0800283a <_malloc_usable_size_r>:
 800283a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800283e:	1f18      	subs	r0, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	bfbc      	itt	lt
 8002844:	580b      	ldrlt	r3, [r1, r0]
 8002846:	18c0      	addlt	r0, r0, r3
 8002848:	4770      	bx	lr
	...

0800284c <_init>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	bf00      	nop
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr

08002858 <_fini>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	bf00      	nop
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr
